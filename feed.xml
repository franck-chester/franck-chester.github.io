<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.1">Jekyll</generator><link href="https://franck-chester.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://franck-chester.github.io//" rel="alternate" type="text/html" /><updated>2022-12-21T00:52:46+00:00</updated><id>https://franck-chester.github.io//feed.xml</id><title type="html">Franck’s stuff</title><subtitle>This is where I document and comment on those titbits I keep stumbling on during my day job, and my evening browsing</subtitle><author><name>Franck</name></author><entry><title type="html">From monolithic to MACH architecture</title><link href="https://franck-chester.github.io//2022/06/06/monolith-to-mach.html" rel="alternate" type="text/html" title="From monolithic to MACH architecture" /><published>2022-06-06T00:00:00+00:00</published><updated>2022-06-06T00:00:00+00:00</updated><id>https://franck-chester.github.io//2022/06/06/monolith-to-mach</id><content type="html" xml:base="https://franck-chester.github.io//2022/06/06/monolith-to-mach.html"><![CDATA[<p>It’s been a while since my last proper post, 
but I’ve given a presentation last week that, I believe,
 deserves to be expanded into a post.</p>

<p>The presentation was about my current employer,
 the Very Group, transformation away from its legacy systems and processes,
and the technology behind that modernisation.</p>

<p>My contribution to the presentation was specifically about how
the Digital Customer Experience (DCX) tribe will re-architect
our flagship e-commerce websites away from our ageing 
monolithic platforms towards a modern, composable, MACH architecture .</p>

<p>You can watch the whole presentation here:</p>

<p><a href="https://youtu.be/A08DhahTZxY" title="Hackajob x The Very Group - Modernising the Technology Behind Very"><img src="https://i9.ytimg.com/vi_webp/A08DhahTZxY/mqdefault.webp?v=62beb7ab&amp;sqp=CLzx-pUG&amp;rs=AOn4CLDRF9DB3lVlaCG5GFhaqfsTMTb64Q" alt="Hackajob x The Very Group - Modernising the Technology Behind Very" /></a></p>

<p>In this post, I reproduce the slides (badly, as powerpoint <em>export to GIF</em> function is poo), together with additional
thoughts I didn’t have time to cover during my slot.</p>

<h1 id="the-problem-of-the-monolith">The problem of the monolith</h1>

<p><img src="/assets/images/Hackajob-slide24.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>A monolithic platform such as <a href="https://docs.oracle.com/cd/E35319_01/Platform.10-2/ATGMultiApp/html/s0202architecturediagram01.html">Oracle e‑commerce ATG</a>
will always, sooner or later, lead to spaghetti logic.</p>

<p>A single codebase will cause well intentioned engineers
to apply <a href="https://www.martinfowler.com/ieeeSoftware/repetition.pdf">DRY</a> principles, 
and shared components which will eventually cause logically independent business concerns
to become coupled through shared code artefacts.</p>

<p>Eventually, on a large codebase such as the <a href="https://www.very.co.uk/">Very Group websites</a> 
and underlying business systems, this coupling makes it near impossible to experiment or accelerate 
the deployment of new features, as every single code change risks impacting other unrelated features.</p>

<p>Releases have to be batched, with sufficient time in between
to allow for regression testing. Automating these tests
is itself difficult as each combination of features causes
 an explosion in the number of regression tests required.</p>

<p>All of this is incompatible with moderns ways of developing and deploying
software, which privilege small and frequent feature
releases with quick customer feedback loops to adjust the direction of travel
before prioritising the next feature.</p>

<h1 id="breaking-down-the-monolith---bit-by-bit">Breaking down the monolith - bit by bit</h1>

<p><img src="/assets/images/Hackajob-slide26.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>We do not have the luxury of recreating our platform from scratch.
We must break the monolith down into its constituent parts before we can start replacing these, one by one, like the planks of Theseus’ ship, without impacting our customers’ experience.</p>

<h2 id="ship-of-theseus">Ship of Theseus</h2>

<p><img src="/assets/images/Hackajob-slide25.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>This thought experiment from the philosophers of ancient Greece asks whether 
an object that has had all of its components replaced remains fundamentally 
the same object.</p>

<p>Putting aside the philosophical question, we will inspire
ourselves from that approach and replace our monolith not 
through one big bang all or nothing approach, but very gradually,
plank by plank, so that our customers will at all time
remain unaware of the transformation.</p>

<p>Unfortunately, by definition, a monolith is not made of
individual components, so, how will we identify the bits 
we can replace?</p>

<p>We will slice and dice the monolith 
along logical boundaries that might not exist in
the codebase but are meaningful to our team.</p>

<h2 id="logically-distinct-customer-journeys">Logically distinct customer journeys</h2>

<p><img src="/assets/images/Hackajob-slide27.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>Our engineering squads are already organised along the journeys 
our customers take through our website.
The presentation and business logic associated with let’s say product discovery
(browsing for and eventually selecting a specific product)
is logically distinct from customer onboarding (creating an account)
or account management.</p>

<p>These journeys are therefore an easy way to slice through the responsibilities of our monolith.</p>

<h2 id="logically-distinct-architecture-layers">Logically distinct architecture layers</h2>

<p><img src="/assets/images/Hackajob-slide28.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>Although monolithic, our platform is layered, with distinct areas of the codebase dealing with front end, business logic and integration with other systems.
Again, the codebase itself will have undesirable dependencies,
but these architectural layers are logically independent and another easy way to slice through the monolith.</p>

<h2 id="logically-distinct-bounded-contexts">Logically distinct bounded contexts</h2>

<p><img src="/assets/images/Hackajob-slide29-30.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>We now look at our entire solution, or rather the problems we are solving with that solution.
According to Domain Driven Design (DDD) This ‘problem domain’ can be broken down into subdomains that are either
<a href="https://blog.jonathanoliver.com/ddd-strategic-design-core-supporting-and-generic-subdomains/">core, generic or supporting</a>:</p>

<ul>
  <li>
    <p>The <strong>core</strong> domain is what truly differentiates us from our competitors, 
our bread and butter, our Unique Selling Point (USP). This is what matters to us as an organisation and where we want to put in all our efforts.</p>

    <p>Our core problem here at the Very Group is how to provide the best digital customer experience, across multi channels,
and make it as easy as possible to find and buy the right product, at the right price, with, if required,
financial options, while meeting all our compliance requirements.</p>
  </li>
  <li>
    <p>On the other hand, many problems in our domain are quite <strong>generic</strong> across our industry and actually quite difficult 
to solve in any way that would differentiate us from our competitors.</p>

    <p>Instead, we are better off partnering with 3rd parties who are happy to treat these problems as their core domain and for us to simply consume those 3rd parties’ solution to these problems.</p>
  </li>
  <li>
    <p>finally, <strong>supporting</strong> sub domains are problems that we must solve in order to address our core problems, 
but will not in themselves differentiate us from our competitors.</p>

    <p>Within these domains, we can now identify problem area that are specific enough from other problem areas. Given problem X, let’s say
“data associated with a customer”, we can clearly state that it belongs in the “<em>customer</em>” problem area, and not the “<em>shopping cart</em>” one.</p>
  </li>
</ul>

<p>We can draw a clear boundary around each of these problem areas, and deal with each independently from others.</p>

<p>This is of course a gross over-simplification of what Domain Driven Design calls “<a href="https://www.martinfowler.com/bliki/BoundedContext.html"><em>Bounded Contexts</em></a>”, see <a href="https://www.dddcommunity.org/book/evans_2003/">Eric Evans’ original book</a> or the much
more actionable <a href="https://www.dddcommunity.org/book/implementing-domain-driven-design-by-vaughn-vernon/">follow-up by his colleague Vaugh Vernon</a> for a much
better explanation.</p>

<h2 id="strangler-fig-pattern">Strangler fig pattern</h2>

<p><img src="/assets/images/Hackajob-slide31.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>We have now sliced and diced our monolith into bounded contexts,
mapped these to our customer journeys and architecture layers
and decided whether they address a core, generic or supporting
problem. We now need to start reimplementing them away from
the monolith, and introduce them into the overall solution
without the customer being aware.</p>

<p>We will achieve this by leveraging the <a href="https://docs.microsoft.com/en-us/azure/architecture/patterns/strangler-fig">Strangler Fig pattern,</a>
and introducing <a href="https://en.wikipedia.org/wiki/Facade_pattern">façade</a> components in front of our monolith, 
tasked with shunting traffic away from the monolith
toward our new components as and when these become available.</p>

<p>As we reimplement more and more of our solution on our
new architecture, the façade will shunt more and more
requests away from the monolith, until eventually we will
be able to remove it and the façade altogether.</p>

<p>Again this is a gross over simplification of the <a href="https://martinfowler.com/articles/break-monolith-into-microservices.html">full decomposition process</a>. There will
be multiple façades, between architecture layers, and
where our customer journeys are not truly independent,
each trying to expose a nice clean interface over the spaghetti 
logic underneath it.</p>

<h1 id="mach-target-architecture">MACH target architecture</h1>

<p>Once we have a strategy to break up the monolith, we can target a modern, non-monolithic, <em>composable</em> architecture.</p>

<p>MACH is a <a href="https://machalliance.org/">cute acronym coined in the retail industry to market SaaS platforms</a> that can be composed into best-of-breed e-commerce solutions.</p>

<p>It stands for <strong>M</strong>icroservices, <strong>A</strong>PI-first, <strong>C</strong>loud native SaaS and <strong>H</strong>eadless components and is very much the pattern you’d use, regardless of industry, to build a modern business application</p>

<h2 id="microservices">Microservices</h2>

<p><img src="/assets/images/Hackajob-slide33.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>Microservices are the technical implementation of the bounded contexts we mentioned earlier:</p>

<p>Having identified tightly defined problems areas with
a clear boundary between what does and doesn’t pertain to a specific problem,
we can design and implement specific solutions to these specific problems.
These solutions should each be applications in their own right,
managed entirely separately from each other, truly independently.</p>

<p>Instead of one big monolithic solution to all our problems, we will
have much smaller (hence the <em>micro-</em> prefix) individual solutions to individual problems.</p>

<p>NB: Yet another over-simplification of what is an <a href="https://martinfowler.com/articles/microservices.html">architecture style in its own right</a>.</p>

<h2 id="apis-and-events">APIs and Events</h2>

<p><img src="/assets/images/Hackajob-slide34.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>To be truly independent from each other, microservices should only communicate (exchange data) via APIs or events.
APIs, Application Programming Interfaces, are basically an agreed contract between a service and its clients, that defines every single detail of the communication, from the protocol, to the data exchanged, the format that data will take, how errors will be returned, etc…</p>

<p>Having agreed on that contract, both sides, service and clients, can implement it whichever way they see fit, independently from each other, using whatever technology or framework they prefer.</p>

<p>APIs do however imply a client-service relationship whereas the client calls the service’s API and expects a response.
Even an <em>asynchronous</em> API will follow that pattern, but broken over 2 separate exchange, one for the request from the client, which is immediately acknowledged by the service, and a later one for the response, from the service to the client, which is also acknowledged by the client.</p>

<p>If either side is not present, or fails during the interaction, the communication will fail.</p>

<p>Events, on the other hand, remove that runtime dependency, by totally decoupling the event <em>publisher</em> from its eventual <em>consumers</em>.
Events are fired into the ether (actually a bus or hub built into the overall platform to be shared across components) without knowing, or caring as to who will consume them, or when. The 2 sides of the communication do not even need to be running at the same time : the publisher might run just long enough to fire an event and then stop, naturally or catastrophically, without it affecting the consumers.</p>

<p><em>This is a very bad explanation - I need to rewrite this bit.</em></p>

<p>From a MACH architecture point of view however, what matters is that APIs and Events allow microservices to be developed, deployed and managed independently of each other.</p>

<h2 id="cloud-native-components-and-technologies">Cloud native components and technologies</h2>

<p><img src="/assets/images/Hackajob-slide35.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p><em>Cloud native</em> can mean different things to different people, or in different contexts. On the one hand, you have the <a href="https://github.com/cncf/toc/blob/main/DEFINITION.md">definition from the Cloud Native Computing Foundation</a>:</p>

<p>“<em>Cloud native technologies empower organizations to build and run scalable applications in modern, dynamic environments such as public, private, and hybrid clouds. Containers, service meshes, microservices, immutable infrastructure, and declarative APIs exemplify this approach.</em>”, and its infamous ‘<a href="https://landscape.cncf.io/">cloud native landscape</a>’.</p>

<p>On the other, we have MACH’s definition:</p>

<p>“<em>Software as a Service developed, designed and deployed as cloud-native applications are composed of several independent services. The independence of each service introduces the ability to maintain and scale, in isolation, horizontally rather than vertically.</em>”.</p>

<p>Personally, I like to think of cloud native as leveraging <em>value-added</em> services from the cloud, i.e. work on the right hand-side of this diagram, from SaaS to PaaS:</p>

<p><img src="/assets/images/hackajob-cloudnative.png" alt="" /></p>

<p><strong>SaaS</strong>: 3rd party software incorporated into our architecture to provide <em>generic domain</em> functionality, should be consumed ‘as a Service’, meaning via APIs or events, and have near zero infrastructure footprint.</p>

<p><strong>FaaS</strong>: the code we implement to provide <em>core domain</em> functionality, should be, as much as possible, be implemented as <a href="https://en.wikipedia.org/wiki/Function_as_a_service"><em>Functions</em></a>, allowing us to concentrate on our core problem and leave all the “<em><a href="https://www.fugue.co/blog/2017-08-30-fugue-reduces-undifferentiated-heavy-lifting.html">undifferentiated heavy lifting</a></em> of triggering, running and scaling (up or down) that code to our cloud provider.</p>

<p><strong>PaaS</strong>: the platform we deploy and run our software on should itself be accessed ‘as a Service’. Storage, queues, event infrastructure, load-balancing, monitoring, alerting, security, and all those other myriad concerns, should again be managed on our behalf by the cloud provider, with as much complexity as possible entirely hidden or abstracted away from us, to again, let us concentrate on our core domain.</p>

<p>During the Hackajob presentation, an attendee asked about <em>multi-cloud</em>, meaning the ability to deploy our software on any or all the available cloud vendors.
It is important to note that “<em>multi-cloud</em>” is only possible if building on the left hand-side of the diagram above, limiting yourself to <em>Infrastructure as a Service</em> (<strong>IaaS</strong>) or <em>Containers as a Service</em> (<strong>CaaS</strong>) and is actually the polar opposite of <em>leveraging value-added services</em>.</p>

<p>To be truly <em>Cloud Native</em> means working together, and trusting your cloud and SaaS provider, and believing they are much much better than you at running infrastructure at scale.</p>

<h2 id="headless-components-and-services">Headless components and services</h2>

<p><img src="/assets/images/Hackajob-slide36.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<p>In order to keep control of all aspect of our Customers experience, it is essential that all the components we incorporate into our solution remain completely Headless, meaning have no user interface, and do not impose any specific user workflows.</p>

<p>As stated above, all interactions must be ‘as a Service’, i.e. via APIs or events, and these must not convey any element of user interaction, be it user messages or any sort of content formatting, and make no assumption as to the user journey that led to these interactions, or whether there is indeed an actual user involved.</p>

<h1 id="technologies-behind-our-transformation">Technologies behind our transformation</h1>

<p>I am not actually going to expand on these much more here, give myself some material for future blogs.</p>

<p><img src="/assets/images/Hackajob-slide37.gif" alt="" style="float:right; padding 0 20px 20px 0" /></p>

<h2 id="saas-partners">SaaS partners</h2>
<ul>
  <li><a href="https://amplience.com/"><strong>Amplience</strong> – Content Management Service</a></li>
  <li><a href="https://commercetools.com"><strong>Commercetools</strong> – e-commerce engine</a></li>
</ul>

<h2 id="aws-paas-value-added-services">AWS PaaS value-added services</h2>
<ul>
  <li><a href="https://docs.aws.amazon.com/lambda/"><strong>Lambda functions</strong> – business logic</a></li>
  <li><a href="https://aws.amazon.com/api-gateway/"><strong>API Gateway</strong> – REST APIs</a></li>
  <li><a href="https://aws.amazon.com/api-gateway/"><strong>EventBridge</strong> – events driven services</a></li>
  <li><a href="https://aws.amazon.com/step-functions"><strong>Step Functions</strong> – orchestration &amp; integration</a></li>
  <li><a href="https://aws.amazon.com/elasticache"><strong>ElastiCache</strong> – Redis &amp; Memcached</a></li>
  <li><a href="https://aws.amazon.com/dynamodb/"><strong>DynamoDb</strong> – NoSQL data storage</a></li>
</ul>

<h2 id="dcx-technology-stack">DCX technology stack</h2>
<ul>
  <li>Javascript + typescript – development language</li>
  <li>React + fastify - web UI</li>
  <li>Kotlin &amp; swift -  native apps</li>
  <li>Storybook – UI Development</li>
  <li>Node.js – microservices</li>
  <li>Open API, Supertest &amp; PACT – API design &amp; testing</li>
  <li>Lighthouse &amp; cypress – end-to-end testing</li>
  <li>Elastic - monitoring (logs &amp; APM &amp; RUM)</li>
  <li>Terraform -  Infrastructure as Code</li>
  <li>Fastlane – app release management</li>
  <li>Gitlab &amp; Jenkins – CI/CD pipelines</li>
</ul>]]></content><author><name>Franck</name></author><category term="aws" /><category term="mach" /><category term="architecture" /><category term="monolith" /><summary type="html"><![CDATA[It’s been a while since my last proper post, but I’ve given a presentation last week that, I believe, deserves to be expanded into a post.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://franck-chester.github.io//assets/images/2022-06-06-header.png" /><media:content medium="image" url="https://franck-chester.github.io//assets/images/2022-06-06-header.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Terraform CDK - part 2</title><link href="https://franck-chester.github.io//2021/11/10/Terraform-CDK-part-2.html" rel="alternate" type="text/html" title="Terraform CDK - part 2" /><published>2021-11-10T00:00:00+00:00</published><updated>2021-11-10T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/11/10/Terraform%20CDK%20part%202</id><content type="html" xml:base="https://franck-chester.github.io//2021/11/10/Terraform-CDK-part-2.html"><![CDATA[<p>It’s been 2 week since the <a href="/2021/10/30/Terraform-CDK-part-1.html">previous post in this series</a> and I am really starting to enjoy the Terraform CDK.</p>

<p>Now that I am more comfortable with it, and with Typescript, I have started organising my code in much more (imo) expressive blocks, which I will later be able to move to a reusable nodejs module, should I wish to.</p>

<p>That said, this exercise is a painful (but useful) reminder of the chasm between the simplistic tutorials available on the web, and reality.
If you, as I do, insist on not using the AWS console, and adhere to best practices such as least privilege and strict separation of infrastructure and code, there are quite a few hoops and loops needed to be jumped through.</p>

<p>Anyway, where were we? Translating this tutorial - <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html">Using Lambda with API Gateway</a> - into Terraform CDK Typescript code.</p>

<h2 id="create-the-function">Create the function</h2>

<h3 id="separations-of-infrastructure-and-code-concerns">Separations of infrastructure and code concerns</h3>
<p>I want to make sure I keep the code separate from the infrastructure, both in separate code repositories.
I should deploy the infrastructure first, then the actual code that powers my lambda function.</p>

<p>I still need to research whether this is actually best practice, but my gut feeling is that using terraform to deploy the code for each new release is the wrong way to go.
My plan is therefore to deploy the lambda infrastructure with a <em>skeleton</em> implementation, and once that is in place, use the <a href="https://awscli.amazonaws.com/v2/documentation/api/2.0.33/reference/lambda/update-function-code.html"><code class="language-plaintext highlighter-rouge">update-function-code</code></a> CLI command to deploy each new version of the actual implementation.</p>

<p>Also, my first attempt at terraforming the lambda function for this tutorial was based on using the <a href="https://registry.terraform.io/providers/hashicorp/archive/latest/docs">archive provider</a> to zip the source code before using the zip file as a parameter of the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function">lambda function resource</a>, very much like <a href="http://aws-cloud.guru/creating-aws-lambdas-through-terraform-using-archive_file/">this tutorial</a> and every other tutorial out there, including the API Gateway one I am trying to reproduce.</p>

<p>Now, this was already a bad idea in standard terraform, as it intermingles infrastructure and code deployments, and seems somehow worse in the CDK, probably because it is hard to stop myself from using the CDK code, which is meant to generate the HCL files which then deploy the infrastructure, to zip and deploy the code itself, which is really a separate concern. I had a few goes at this in various formats but at the end of the day, it smells.</p>

<p>So, I am going to create a <a href="https://aws.amazon.com/blogs/compute/new-deployment-options-for-aws-lambda/">S3 bucket for code deployment</a>, as part of my sandbox setup scripts, refer to it within my CDK code and later, when calling <a href="https://awscli.amazonaws.com/v2/documentation/api/2.0.33/reference/lambda/update-function-code.html"><code class="language-plaintext highlighter-rouge">update-function-code</code></a>.</p>

<h3 id="use-iamlive-to-create-iac-user-iam-policy">Use iamlive to create IaC user IAM policy</h3>

<p>I know from experience that creating a S3 bucket requires access rights to quite a few <a href="https://docs.aws.amazon.com/AmazonS3/latest/userguide/list_amazons3.html#amazons3-actions-as-permissions">Actions</a>. Rather than carry on with the painful one-at-a-time approach used in <a href="/2021/10/30/Terraform-CDK-part-1.html">part 1</a>, I am going to get smarter and use the <a href="https://github.com/iann0036/iamlive">iamlive utility</a>.</p>

<p>I first clone the repository, build and install the utility.
I then add this new powershell script - <code class="language-plaintext highlighter-rouge">iamlive.ps1</code> - to my setup folder:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kr">param</span><span class="p">([</span><span class="n">switch</span><span class="p">]</span><span class="nv">$stop</span><span class="p">)</span><span class="w">

</span><span class="kr">if</span><span class="p">(</span><span class="nv">$stop</span><span class="o">.</span><span class="nf">isPresent</span><span class="p">){</span><span class="w">
    </span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Stopping iamlive..."</span><span class="w">
    </span><span class="n">Stop-Process</span><span class="w"> </span><span class="nt">-Name</span><span class="w"> </span><span class="s2">"iamlive"</span><span class="w">
    </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">AWS_CSM_ENABLED</span><span class="o">=</span><span class="bp">$false</span><span class="w">
    </span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Stopping iamlive: done"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">else</span><span class="p">{</span><span class="w">
    </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">AWS_CSM_ENABLED</span><span class="o">=</span><span class="bp">$true</span><span class="w">
    </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">AWS_CSM_PORT</span><span class="o">=</span><span class="mi">31000</span><span class="w">
    </span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">AWS_CSM_HOST</span><span class="o">=</span><span class="mf">127.0</span><span class="o">.</span><span class="nf">0</span><span class="o">.</span><span class="nf">1</span><span class="w">

    </span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Starting iamlive..."</span><span class="w">
    </span><span class="n">Start-Process</span><span class="w"> </span><span class="nt">-FilePath</span><span class="w"> </span><span class="s2">"</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">GOPATH</span><span class="s2">/bin/iamlive.exe"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This will start iamlive in a separate terminal, and proxy all AWS SDK calls (as used by terraform) through the iamlive utility, which will <a href="https://raw.githubusercontent.com/iann0036/iamlive/main/iamlivecore/map.json">map them to the corresponding permissions</a>.</p>

<p>I also modify my <code class="language-plaintext highlighter-rouge">main.ts</code> file to source the AWS profile from a <code class="language-plaintext highlighter-rouge">awsprofile</code> environmental variable. I would have preferred a command line parameter, but these are currently not easy to pass down to the app in all <a href="https://discuss.hashicorp.com/t/run-command-cdktf-deploy-with-parameters/14374/2"><code class="language-plaintext highlighter-rouge">cdktf</code> commands</a>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">profile</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>

    <span class="k">new</span> <span class="nx">AwsProvider</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">aws</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">region</span><span class="p">:</span> <span class="dl">'</span><span class="s1">eu-west-1</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">profile</span><span class="p">:</span> <span class="nx">profile</span>
    <span class="p">})</span>

<span class="p">...</span>

<span class="kd">const</span> <span class="nx">profile</span> <span class="o">=</span> <span class="p">(</span><span class="dl">'</span><span class="s1">awsprofile</span><span class="dl">'</span> <span class="k">in</span> <span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">)</span> <span class="p">?</span> <span class="s2">`</span><span class="p">${</span><span class="nx">process</span><span class="p">.</span><span class="nx">env</span><span class="p">.</span><span class="nx">awsprofile</span><span class="p">}</span><span class="s2">`</span> <span class="p">:</span> <span class="dl">'</span><span class="s1">franck-iac</span><span class="dl">'</span><span class="p">;</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`Using AWS profile </span><span class="p">${</span><span class="nx">profile</span><span class="p">}</span><span class="s2">`</span><span class="p">)</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">()</span>

<span class="k">new</span> <span class="nx">MyStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">day04</span><span class="dl">"</span><span class="p">,</span> <span class="nx">profile</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">synth</span><span class="p">();</span>
</code></pre></div></div>

<p>I then execute <code class="language-plaintext highlighter-rouge">cdktf apply</code> with my admin profile, and get a nice policy in the terminal running <code class="language-plaintext highlighter-rouge">iamlive</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"ec2:DescribeAccountAttributes"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:ListBucket"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:GetPolicy"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:GetRole"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:GetPolicyVersion"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:ListRolePolicies"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:ListAttachedRolePolicies"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketAcl"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketCORS"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketWebsite"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketVersioning"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetAccelerateConfiguration"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketRequestPayment"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketLogging"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetLifecycleConfiguration"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetReplicationConfiguration"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetEncryptionConfiguration"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketObjectLockConfiguration"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:GetBucketTagging"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:DeleteBucket"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:CreateBucket"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:PutBucketTagging"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"s3:PutBucketVersioning"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:ListPolicyVersions"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:ListInstanceProfilesForRole"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:DeletePolicy"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:DeleteRole"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>I follow this with <code class="language-plaintext highlighter-rouge">cdktf destroy</code>, again with my admin profile, which updates the policy displayed in the terminal with the additional actions required to delete the infrastructure.</p>

<p>I can now incorporate the missing actions in the IaC user policy.</p>

<p>I’ve also installed the <a href="https://github.com/fvclaus/vsc-sort-json-array#sort-json-array">sort json array vscode extension</a>, to keep my <code class="language-plaintext highlighter-rouge">iac-policy.json</code> file tidy, and easily compare the output from iamlive to it, and identify what needs adding.</p>

<p>Although this works remarkably well, it is far from perfect and can still miss some actions, probably because the iamlive <a href="https://raw.githubusercontent.com/iann0036/iamlive/main/iamlivecore/map.json">map</a> is incomplete or out of date. For example, it output the v1 permissions for the APIGateway, and completely missed the <code class="language-plaintext highlighter-rouge">s3:DeleteObject</code> and <code class="language-plaintext highlighter-rouge">s3:DeleteObjectVersion</code>, causing me quite a bit of faffing to identify the correct policy using the tried and tested combination of IAM console and documentation <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/reference_policies_actions-resources-contextkeys.html">(Actions, resources, and condition keys for AWS services)</a>. The policy also needs the actions associated with updates, otherwise small updates to the CDK code will fail without destroying the stack entirely first before reapplying it.</p>

<p>Finally, I will need to revisit this again later as this is still not a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege">least privilege</a> policy, as it still enables my IaC user to delete resources it hasn’t created.
My next move, in a future experiment, will be <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">using tags</a>.</p>

<h3 id="creating-a-s3-bucket-for-lambda-code-deployment">Creating a S3 bucket for lambda code deployment</h3>

<p>Not much to say, we simply use the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket">S3 Bucket resource</a>, making sure to set 
<code class="language-plaintext highlighter-rouge">forceDestroy: true</code> to ensure <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/s3_bucket#force_destroy">all objects (including any locked objects) are from the bucket before destroying it</a> <sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup> - otherwise we wouldn’t be able to tear down this infrastructure.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">S3</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@cdktf/provider-aws</span><span class="dl">'</span><span class="p">;</span>

<span class="p">...</span>

<span class="kd">const</span> <span class="nx">sourceBucket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">S3</span><span class="p">.</span><span class="nx">S3Bucket</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lambda_source_bucket</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">bucket</span><span class="p">:</span> <span class="dl">'</span><span class="s1">franck-iac-lambda-source-bucket</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">acl</span><span class="p">:</span> <span class="dl">'</span><span class="s1">private</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">tags</span><span class="p">:</span> <span class="nx">tags</span><span class="p">,</span>
    <span class="na">versioning</span><span class="p">:</span> <span class="p">{</span>
      <span class="na">enabled</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">},</span>
    <span class="na">forceDestroy</span><span class="p">:</span> <span class="kc">true</span>
  <span class="p">});</span>
</code></pre></div></div>

<h3 id="upload-placeholder-lambda-source-code-to-s3-bucket">Upload placeholder lambda source code to S3 Bucket</h3>

<p>We cannot create a lambda function without code behind it, but we can point the lambda to a barebone implementation which we’ll later override with the actual code <sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup>.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">exports</span><span class="p">.</span><span class="nx">handler</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="nx">context</span><span class="p">,</span> <span class="nx">callback</span><span class="p">)</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Received event:</span><span class="dl">'</span><span class="p">,</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">event</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="mi">2</span><span class="p">));</span>
    <span class="kd">const</span> <span class="nx">responseBody</span> <span class="o">=</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">warning</span><span class="dl">"</span><span class="p">:</span><span class="dl">"</span><span class="s2">Placeholder code - function not yet implemented</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">event</span><span class="dl">"</span><span class="p">:</span><span class="nx">event</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="p">{</span>
        <span class="dl">"</span><span class="s2">statusCode</span><span class="dl">"</span><span class="p">:</span> <span class="mi">200</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">headers</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">Content-Type</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">application/json</span><span class="dl">"</span>
        <span class="p">},</span>
        <span class="dl">"</span><span class="s2">body</span><span class="dl">"</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">responseBody</span><span class="p">),</span>
        <span class="dl">"</span><span class="s2">isBase64Encoded</span><span class="dl">"</span><span class="p">:</span> <span class="kc">false</span>
    <span class="p">};</span>
    <span class="nx">callback</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="nx">response</span><span class="p">);</span>
<span class="p">};</span>
</code></pre></div></div>

<p>We do this with a combination of Terraform assets and S3 Bucket object, as <a href="https://www.terraform.io/docs/cdktf/concepts/assets.html#usage-example">per this example</a>.</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">sourceAsset</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">TerraformAsset</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">lambda_asset</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">path</span><span class="p">:</span> <span class="nx">path</span><span class="p">.</span><span class="nx">resolve</span><span class="p">(</span><span class="nx">__dirname</span><span class="p">,</span> <span class="dl">"</span><span class="s2">src</span><span class="dl">"</span><span class="p">),</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">AssetType</span><span class="p">.</span><span class="nx">ARCHIVE</span><span class="p">,</span> 
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">sourceBucketObject</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">S3</span><span class="p">.</span><span class="nx">S3BucketObject</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">lambda_archive</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">bucket</span><span class="p">:</span> <span class="nx">sourceBucket</span><span class="p">.</span><span class="nx">bucket</span><span class="o">!</span><span class="p">,</span>   <span class="c1">// exclamation mark is non-null-assertion-operator</span>
    <span class="na">key</span><span class="p">:</span> <span class="nx">sourceAsset</span><span class="p">.</span><span class="nx">fileName</span><span class="p">,</span>
    <span class="na">source</span><span class="p">:</span> <span class="nx">sourceAsset</span><span class="p">.</span><span class="nx">path</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div></div>

<p>NB: when using one resource’s attribute to set another’s, we often hit this error <code class="language-plaintext highlighter-rouge">Type 'string | undefined' is not assignable to type 'string'</code>.
To work around this, we simply use the typescript <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-0.html#non-null-assertion-operator">non-null assertion operator (!)</a>.</p>

<h3 id="creating-a-lambda-function-sourced-from-a-s3-bucket">Creating a Lambda function sourced from a S3 Bucket</h3>

<p>First import the <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/lambda_function"><code class="language-plaintext highlighter-rouge">LambdaFunction</code></a> type from the AWS provider.
Here we are hitting the <a href="https://github.com/hashicorp/terraform-cdk/blob/main/docs/upgrade-guide/upgrading-to-0.7.md#aws-provider-has-namespaced-resources">recently introduced namespaces</a>. For IAM and S3, these looked fine, but for lambda functions, we would end up referring to <code class="language-plaintext highlighter-rouge">LambdaFunction.LambdaFunction</code> in our code, which would be pants. We therefore <a href="https://www.typescriptlang.org/docs/handbook/namespaces.html#aliases">alias the type</a></p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">LambdaFunction</span> <span class="k">as</span> <span class="nx">LambdaFunctionNS</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@cdktf/provider-aws</span><span class="dl">'</span><span class="p">;</span>
<span class="kd">const</span> <span class="p">{</span> <span class="nx">LambdaFunction</span> <span class="p">}</span> <span class="o">=</span> <span class="nx">LambdaFunctionNS</span><span class="p">.</span><span class="nx">LambdaFunction</span><span class="p">;</span>

<span class="p">...</span>

<span class="kd">const</span> <span class="nx">lambda</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">LambdaFunction</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lambda</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">functionName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">LambdaFunctionOverHttps</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">as per https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">s3Bucket</span><span class="p">:</span> <span class="nx">sourceBucket</span><span class="p">.</span><span class="nx">bucket</span><span class="o">!</span><span class="p">,</span>
    <span class="na">s3Key</span><span class="p">:</span> <span class="nx">sourceBucketObject</span><span class="p">.</span><span class="nx">key</span><span class="p">,</span>
    <span class="na">role</span><span class="p">:</span> <span class="nx">LambdaApiGatewayRole</span><span class="p">.</span><span class="nx">arn</span><span class="p">,</span>
    <span class="na">runtime</span><span class="p">:</span> <span class="dl">'</span><span class="s1">nodejs12.x</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">handler</span><span class="p">:</span> <span class="dl">'</span><span class="s1">index.handler</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">tags</span><span class="p">:</span> <span class="nx">tags</span>
<span class="p">});</span>
</code></pre></div></div>

<p>We point the lambda at the S3 bucket and object created earlier, from where it will load our skeleton implementation.</p>

<h3 id="deploy-to-the-sandbox">Deploy to the sandbox</h3>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Deploying</span> <span class="nx">Stack</span><span class="err">:</span> <span class="nx">day04</span>
<span class="nx">Resources</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">lambda_apigateway_p</span> <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">lambda_apigateway_policy</span>
                        <span class="nx">olicy</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE</span>         <span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">r</span> <span class="nx">aws_iam_role</span><span class="err">.</span><span class="nx">lambda_apigateway_role</span>
                        <span class="nx">ole</span>                       
 <span class="err">✔</span> <span class="nx">AWS_LAMBDA_FUNCTION</span>  <span class="nx">lambda</span>              <span class="nx">aws_lambda_function</span><span class="err">.</span><span class="nx">lambda</span>
 <span class="err">✔</span> <span class="nx">AWS_S3_BUCKET</span>        <span class="nx">lambda_source_bucke</span> <span class="nx">aws_s3_bucket</span><span class="err">.</span><span class="nx">lambda_source_bucket</span>
                        <span class="nx">t</span>
 <span class="err">✔</span> <span class="nx">AWS_S3_BUCKET_OBJECT</span> <span class="nx">lambda_archive</span>      <span class="nx">aws_s3_bucket_object</span><span class="err">.</span><span class="nx">lambda_archive</span>

<span class="nx">Summary</span><span class="err">:</span> <span class="mi">5</span> <span class="nx">created</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">updated</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">destroyed</span><span class="err">.</span>
</code></pre></div></div>

<p>Success.</p>

<h2 id="test-the-lambda">Test the lambda</h2>

<p>The tutorial and a lot of examples out there are out of date, <a href="https://docs.aws.amazon.com/cli/latest/userguide/cliv2-migration.html#cliv2-migration-binaryparam">CLI v2 defaults to base 64 input</a>.</p>

<p>You can either add a –cli-binary-format raw-in-base64-out argument to the command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws lambda invoke --profile admin-sandbox --function-name LambdaFunctionOverHttps --payload file://tests/helloworld.json --cli-binary-format raw-in-base64-out tests/output.txt 
</code></pre></div></div>

<p>OR specify the file with <code class="language-plaintext highlighter-rouge">fileb://</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> aws lambda invoke --profile admin-sandbox --function-name LambdaFunctionOverHttps --payload fileb://tests/helloworld.json  tests/output.txt
</code></pre></div></div>

<p>Either way, with <code class="language-plaintext highlighter-rouge">tests/helloworld.json</code> set to:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Hello"</span><span class="p">:</span><span class="w"> </span><span class="s2">"world"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>
<p>Both call result in a success response :</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"StatusCode"</span><span class="p">:</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w">
    </span><span class="nl">"ExecutedVersion"</span><span class="p">:</span><span class="w"> </span><span class="s2">"$LATEST"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>with <code class="language-plaintext highlighter-rouge">tests/output.txt</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"statusCode"</span><span class="p">:</span><span class="w"> </span><span class="mi">200</span><span class="p">,</span><span class="w">
    </span><span class="nl">"headers"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"Content-Type"</span><span class="p">:</span><span class="w"> </span><span class="s2">"application/json"</span><span class="w">
    </span><span class="p">},</span><span class="w">
    </span><span class="nl">"body"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{</span><span class="se">\"</span><span class="s2">warning</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Placeholder code - function not yet implemented</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">event</span><span class="se">\"</span><span class="s2">:{</span><span class="se">\"</span><span class="s2">Hello</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">world</span><span class="se">\"</span><span class="s2">}}"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"isBase64Encoded"</span><span class="p">:</span><span class="w"> </span><span class="kc">false</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>which matches what we expect - success.</p>

<h2 id="create-a-rest-api-using-api-gateway">Create a REST API using API Gateway</h2>

<p>We need to mix and match and translate these 3 terraform HCL examples into their CDK equivalent</p>
<ul>
  <li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_deployment#terraform-resources">api_gateway_deployment</a></li>
  <li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_integration#lambda-integration">api_gateway_integration</a></li>
  <li><a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/resources/api_gateway_account#example-usage">api_gateway_account</a></li>
</ul>

<p>This will:</p>
<ul>
  <li>create a REST API</li>
  <li>define a resource that can be manipulated via it</li>
  <li>define an integration to our lambda function to handle operations against that resource</li>
  <li>deploy and configure that REST API as ‘stage’ v1</li>
  <li>configure our API Gateway account so that it can log to cloudwatch</li>
</ul>

<p>Worth noting as well that one thing I forgot to do in my <a href="/2021/10/30/Terraform-CDK-part-1.html">previous post</a> was to attach the policy to the role.
Most examples use inline policies, but I prefer to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-vs-inline.html#choosing-managed-or-inline">use managed ones</a> for consistency.</p>

<p>Finally, we use a <a href="https://www.terraform.io/docs/language/values/outputs.html">terraform output</a> to display the deployed API URL on the console</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">restApi</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayRestApi</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">DynamoDBOperations</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">as per https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">tags</span><span class="p">:</span> <span class="nx">tags</span><span class="p">,</span>
    <span class="na">endpointConfiguration</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">types</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">REGIONAL</span><span class="dl">'</span><span class="p">]</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">apiGatewayResource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayResource</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_resource</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">parentId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">rootResourceId</span><span class="p">,</span>
    <span class="na">pathPart</span><span class="p">:</span> <span class="dl">"</span><span class="s2">dynamodbmanager</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">apiGatewayMethod</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayMethod</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_method_post</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">authorization</span><span class="p">:</span> <span class="dl">"</span><span class="s2">NONE</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">httpMethod</span><span class="p">:</span> <span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">resourceId</span><span class="p">:</span> <span class="nx">apiGatewayResource</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">apiGatewayMethodIntegration</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayIntegration</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_integration</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">AWS_PROXY</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">httpMethod</span><span class="p">:</span> <span class="nx">apiGatewayMethod</span><span class="p">.</span><span class="nx">httpMethod</span><span class="p">,</span> <span class="c1">// the method to use when calling the API Gateway endpoint</span>
    <span class="na">integrationHttpMethod</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>              <span class="c1">//  the method used by API Gateway to call the backend (it should always be POST for Lambda)</span>
    <span class="na">resourceId</span><span class="p">:</span> <span class="nx">apiGatewayResource</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">uri</span><span class="p">:</span> <span class="nx">lambda</span><span class="p">.</span><span class="nx">invokeArn</span><span class="p">,</span>
    <span class="na">credentials</span><span class="p">:</span> <span class="nx">credentials</span><span class="p">.</span><span class="nx">arn</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">apiGatewayDeployment</span><span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayDeployment</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_deployment</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">triggers</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">redeployment</span><span class="p">:</span> <span class="nx">Fn</span><span class="p">.</span><span class="nx">sha1</span><span class="p">(</span><span class="nx">Fn</span><span class="p">.</span><span class="nx">jsonencode</span><span class="p">([</span><span class="nx">apiGatewayResource</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">apiGatewayMethod</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">apiGatewayMethodIntegration</span><span class="p">.</span><span class="nx">id</span><span class="p">]))</span>
    <span class="p">},</span>
    <span class="na">lifecycle</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">createBeforeDestroy</span><span class="p">:</span> <span class="kc">true</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">apiGatewayDeploymentStage</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayStage</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_stage</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">deploymentId</span><span class="p">:</span> <span class="nx">apiGatewayDeployment</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="na">restApiId</span><span class="p">:</span> <span class="nx">apiGatewayDeployment</span><span class="p">.</span><span class="nx">restApiId</span><span class="p">,</span>
    <span class="na">stageName</span><span class="p">:</span> <span class="dl">'</span><span class="s1">v1</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">tags</span><span class="p">:</span> <span class="nx">tags</span>
<span class="p">});</span>

<span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayMethodSettings</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api-gateway-method-settings</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">restApiId</span><span class="p">:</span> <span class="nx">apiGatewayDeployment</span><span class="p">.</span><span class="nx">restApiId</span><span class="p">,</span>
    <span class="na">stageName</span><span class="p">:</span> <span class="nx">apiGatewayDeploymentStage</span><span class="p">.</span><span class="nx">stageName</span><span class="p">,</span>
    <span class="na">methodPath</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*/*</span><span class="dl">"</span><span class="p">,</span>
    <span class="na">settings</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">metricsEnabled</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">dataTraceEnabled</span><span class="p">:</span> <span class="kc">true</span><span class="p">,</span>
        <span class="na">loggingLevel</span><span class="p">:</span> <span class="dl">'</span><span class="s1">INFO</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">throttlingRateLimit</span><span class="p">:</span> <span class="mi">100</span><span class="p">,</span>
        <span class="na">throttlingBurstLimit</span><span class="p">:</span> <span class="mi">50</span>
    <span class="p">}</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">apiGatewayPolicy</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IAM</span><span class="p">.</span><span class="nx">IamPolicy</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_policy</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">api_gateway_policy</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Access rights for my API Gateway - mainly read and write cloudwatch logs</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">policy</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
      <span class="dl">"</span><span class="s2">Version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2012-10-17</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">Statement</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="dl">"</span><span class="s2">Effect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Allow</span><span class="dl">"</span><span class="p">,</span>
          <span class="dl">"</span><span class="s2">Action</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
            <span class="dl">"</span><span class="s2">logs:CreateLogGroup</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:CreateLogStream</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:DescribeLogGroups</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:DescribeLogStreams</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:PutLogEvents</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:GetLogEvents</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:FilterLogEvents</span><span class="dl">"</span>
          <span class="p">],</span>
          <span class="dl">"</span><span class="s2">Resource</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">}),</span>
    <span class="na">tags</span><span class="p">:</span> <span class="nx">tags</span>
  <span class="p">});</span>

<span class="kd">const</span> <span class="nx">apiGatewayRole</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IAM</span><span class="p">.</span><span class="nx">IamRole</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="dl">'</span><span class="s1">apigateway_role</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">apigateway_role</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">IAM role for the API Gateway</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">assumeRolePolicy</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">({</span>
        <span class="dl">"</span><span class="s2">Version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2012-10-17</span><span class="dl">"</span><span class="p">,</span>
        <span class="dl">"</span><span class="s2">Statement</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
            <span class="dl">"</span><span class="s2">Effect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Allow</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">Principal</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">Service</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">apigateway.amazonaws.com</span><span class="dl">"</span>
            <span class="p">},</span>
            <span class="dl">"</span><span class="s2">Action</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sts:AssumeRole</span><span class="dl">"</span>
        <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">})</span>
<span class="p">});</span>

<span class="k">new</span> <span class="nx">IAM</span><span class="p">.</span><span class="nx">IamRolePolicyAttachment</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="dl">'</span><span class="s1">apigateway_role_policy_attachment</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">role</span><span class="p">:</span> <span class="nx">apiGatewayRole</span><span class="p">.</span><span class="nx">name</span><span class="o">!</span><span class="p">,</span>
    <span class="na">policyArn</span><span class="p">:</span> <span class="nx">apiGatewayPolicy</span><span class="p">.</span><span class="nx">arn</span>
<span class="p">});</span>

<span class="k">return</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayAccount</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_account</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">cloudwatchRoleArn</span><span class="p">:</span> <span class="nx">apiGatewayRole</span><span class="p">.</span><span class="nx">arn</span>
<span class="p">});</span>

<span class="k">new</span> <span class="nx">TerraformOutput</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">invoke-url</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
    <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Invoke URL for the API</span><span class="dl">'</span><span class="p">,</span>
    <span class="na">value</span><span class="p">:</span> <span class="nx">apiGatewayDeploymentStage</span><span class="p">.</span><span class="nx">invokeUrl</span>
<span class="p">});</span>

</code></pre></div></div>

<h2 id="deploy-to-the-sandbox-1">Deploy to the sandbox</h2>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Deploying</span> <span class="nx">Stack</span><span class="err">:</span> <span class="nx">day04</span>
<span class="nx">Resources</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_ACCO</span> <span class="nx">api_gateway_account</span> <span class="nx">aws_api_gateway_account</span><span class="err">.</span><span class="nx">api_gateway_acc</span>
   <span class="nx">UNT</span>                                      <span class="nx">ount</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_DEPL</span> <span class="nx">api_gateway_deploym</span> <span class="nx">aws_api_gateway_deployment</span><span class="err">.</span><span class="nx">api_gateway_</span>
   <span class="nx">OYMENT</span>               <span class="nx">ent</span>                 <span class="nx">deployment</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_INTE</span> <span class="nx">api_gateway_method_</span> <span class="nx">aws_api_gateway_integration</span><span class="err">.</span><span class="nx">api_gateway</span>
   <span class="nx">GRATION</span>              <span class="nx">post_integration_dy</span> <span class="nx">_method_post_integration_dynamodbmanage</span>
                        <span class="nx">namodbmanager</span>       <span class="nx">r</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_METH</span> <span class="nx">api_gateway_method_</span> <span class="nx">aws_api_gateway_method</span><span class="err">.</span><span class="nx">api_gateway_meth</span>
   <span class="nx">OD</span>                   <span class="nx">post_dynamodbmanage</span> <span class="nx">od_post_dynamodbmanager</span>
                        <span class="nx">r</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_METH</span> <span class="nx">api</span><span class="err">-</span><span class="nx">gateway</span><span class="err">-</span><span class="nx">method</span><span class="err">-</span> <span class="nx">aws_api_gateway_method_settings</span><span class="err">.</span><span class="nx">api</span><span class="err">-</span><span class="nx">gat</span>
   <span class="nx">OD_SETTINGS</span>          <span class="nx">settings</span>            <span class="nx">eway</span><span class="err">-</span><span class="nx">method</span><span class="err">-</span><span class="nx">settings</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_RESO</span> <span class="nx">api_gateway_resourc</span> <span class="nx">aws_api_gateway_resource</span><span class="err">.</span><span class="nx">api_gateway_re</span>
   <span class="nx">URCE</span>                 <span class="nx">e_dynamodbmanager</span>   <span class="nx">source_dynamodbmanager</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_REST</span> <span class="nx">api_gateway_rest_ap</span> <span class="nx">aws_api_gateway_rest_api</span><span class="err">.</span><span class="nx">api_gateway_re</span>
   <span class="nx">_API</span>                 <span class="nx">i_dynamodbmanager</span>   <span class="nx">st_api_dynamodbmanager</span>
 <span class="err">✔</span> <span class="nx">AWS_API_GATEWAY_STAG</span> <span class="nx">api_gateway_stage</span>   <span class="nx">aws_api_gateway_stage</span><span class="err">.</span><span class="nx">api_gateway_stage</span>
   <span class="nx">E</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">api_gateway_policy</span>  <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">api_gateway_policy</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">lambda_apigateway_p</span> <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">lambda_apigateway_policy</span>
                        <span class="nx">olicy</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">rest_api_policy_TfT</span> <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">rest_api_policy_TfTokenT</span>
                        <span class="nx">okenTOKEN9</span>          <span class="nx">OKEN9</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE</span>         <span class="nx">apigateway_role</span>     <span class="nx">aws_iam_role</span><span class="err">.</span><span class="nx">apigateway_role</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE</span>         <span class="nx">lambda_apigateway_r</span> <span class="nx">aws_iam_role</span><span class="err">.</span><span class="nx">lambda_apigateway_role</span>
                        <span class="nx">ole</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE</span>         <span class="nx">rest_api_role_TfTok</span> <span class="nx">aws_iam_role</span><span class="err">.</span><span class="nx">rest_api_role_TfTokenTOKEN</span>
                        <span class="nx">enTOKEN11</span>           <span class="mi">11</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE_POLICY_</span> <span class="nx">apigateway_role_pol</span> <span class="nx">aws_iam_role_policy_attachment</span><span class="err">.</span><span class="nx">apigatew</span>
   <span class="nx">ATTACHMENT</span>           <span class="nx">icy_attachment</span>      <span class="nx">ay_role_policy_attachment</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE_POLICY_</span> <span class="nx">lambda_apigateway_r</span> <span class="nx">aws_iam_role_policy_attachment</span><span class="err">.</span><span class="nx">lambda_a</span>
   <span class="nx">ATTACHMENT</span>           <span class="nx">ole_policy_attachme</span> <span class="nx">pigateway_role_policy_attachment</span>
                        <span class="nx">nt</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE_POLICY_</span> <span class="nx">rest_api_role_polic</span> <span class="nx">aws_iam_role_policy_attachment</span><span class="err">.</span><span class="nx">rest_api</span>
   <span class="nx">ATTACHMENT</span>           <span class="nx">y_attachment_TfToke</span> <span class="nx">_role_policy_attachment_TfTokenTOKEN12</span>
                        <span class="nx">nTOKEN12</span>
 <span class="err">✔</span> <span class="nx">AWS_LAMBDA_FUNCTION</span>  <span class="nx">lambda</span>              <span class="nx">aws_lambda_function</span><span class="err">.</span><span class="nx">lambda</span>
 <span class="err">✔</span> <span class="nx">AWS_S3_BUCKET</span>        <span class="nx">lambda_source_bucke</span> <span class="nx">aws_s3_bucket</span><span class="err">.</span><span class="nx">lambda_source_bucket</span>
                        <span class="nx">t</span>
 <span class="err">✔</span> <span class="nx">AWS_S3_BUCKET_OBJECT</span> <span class="nx">lambda_archive</span>      <span class="nx">aws_s3_bucket_object</span><span class="err">.</span><span class="nx">lambda_archive</span>

<span class="nx">Summary</span><span class="err">:</span> <span class="mi">20</span> <span class="nx">created</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">updated</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">destroyed</span><span class="err">.</span>

<span class="nx">Output</span><span class="err">:</span> <span class="nx">invoke</span><span class="err">-</span><span class="nx">url</span> <span class="err">=</span> <span class="nx">https</span><span class="err">:</span><span class="c1">//ruwqixs5g5.execute-api.eu-west-1.amazonaws.com/v1</span>
</code></pre></div></div>

<p>Looking good! 20 terraform resources though, for a simple API!</p>

<h2 id="invoke-our-newly-deployed-api">Invoke our newly deployed API</h2>

<p>I am a big fan of the vscode <a href="https://marketplace.visualstudio.com/items?itemName=humao.rest-client">REST client extension</a> - much easier than the bloat of <a href="https://www.postman.com/product/what-is-postman/">postman</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>POST https://ruwqixs5g5.execute-api.eu-west-1.amazonaws.com/v1/dynamodbmanager
Content-Type: application/json

{
     "hello": "world"
}
</code></pre></div></div>
<p>results in</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>HTTP/1.1 200 OK
Date: Wed, 10 Nov 2021 22:02:33 GMT
Content-Type: application/json
Content-Length: 1738
Connection: close
x-amzn-RequestId: 9de3e048-306f-4ada-8e8b-cd7dd2d71d2e
x-amz-apigw-id: Im8rAFZIjoEFuOw=
X-Amzn-Trace-Id: Root=1-618c4179-18f4fd98090a20d23b2638d3;Sampled=0

{
  "warning": "Placeholder code - function not yet implemented",
  "event": {
    "resource": "/dynamodbmanager",
    "path": "/dynamodbmanager",
    "httpMethod": "POST",
    "headers": {
      "accept-encoding": "gzip, deflate",
      "content-type": "application/json",
      "Host": "ruwqixs5g5.execute-api.eu-west-1.amazonaws.com",
      "User-Agent": "vscode-restclient",
      "X-Amzn-Trace-Id": "Root=1-618c4179-18f4fd98090a20d23b2638d3",
      "X-Forwarded-For": "98.76.54.32",
      "X-Forwarded-Port": "443",
      "X-Forwarded-Proto": "https"
    },
    "multiValueHeaders": {
      "accept-encoding": [
        "gzip, deflate"
      ],
      "content-type": [
        "application/json"
      ],
      "Host": [
        "ruwqixs5g5.execute-api.eu-west-1.amazonaws.com"
      ],
      "User-Agent": [
        "vscode-restclient"
      ],
      "X-Amzn-Trace-Id": [
        "Root=1-618c4179-18f4fd98090a20d23b2638d3"
      ],
      "X-Forwarded-For": [
        "98.76.54.32"
      ],
      "X-Forwarded-Port": [
        "443"
      ],
      "X-Forwarded-Proto": [
        "https"
      ]
    },
    "queryStringParameters": null,
    "multiValueQueryStringParameters": null,
    "pathParameters": null,
    "stageVariables": null,
    "requestContext": {
      "resourceId": "hagmic",
      "resourcePath": "/dynamodbmanager",
      "httpMethod": "POST",
      "extendedRequestId": "Im8rAFZIjoEFuOw=",
      "requestTime": "10/Nov/2021:22:02:33 +0000",
      "path": "/v1/dynamodbmanager",
      "accountId": "012345678910",
      "protocol": "HTTP/1.1",
      "stage": "v1",
      "domainPrefix": "ruwqixs5g5",
      "requestTimeEpoch": 1636581753401,
      "requestId": "9de3e048-306f-4ada-8e8b-cd7dd2d71d2e",
      "identity": {
        "cognitoIdentityPoolId": null,
        "accountId": null,
        "cognitoIdentityId": null,
        "caller": null,
        "sourceIp": "12.34.56.78",
        "principalOrgId": null,
        "accessKey": null,
        "cognitoAuthenticationType": null,
        "cognitoAuthenticationProvider": null,
        "userArn": null,
        "userAgent": "vscode-restclient",
        "user": null
      },
      "domainName": "ruwqixs5g5.execute-api.eu-west-1.amazonaws.com",
      "apiId": "ruwqixs5g5"
    },
    "body": "{\r\n     \"hello\": \"world\"\r\n}",
    "isBase64Encoded": false
  }
}

</code></pre></div></div>

<p>Again, result!</p>

<h2 id="refactor-the-code">Refactor the code</h2>

<p>So far, we have not really leveraged the move from HCL to a strongly typed language (typescript).</p>

<p>Let’s do that now - group related resources in their own functions, and start using self-descriptive names for functions and variables to make it all easier to understand.</p>

<p>And, while we are at it, mostly for the fun of it, because strictly speaking we have no need for it yet, let’s add some logic to enable us to define multiple methods on an resource, not just POST, but GET, PUT and DELETE as well, to cover all aspects of <a href="https://en.wikipedia.org/wiki/Create,_read,_update_and_delete">CRUD</a></p>

<p>For example:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">defineRestApiResourceDeployment</span><span class="p">(</span>
    <span class="nx">stack</span><span class="p">:</span> <span class="nx">TerraformStack</span><span class="p">,</span> 
    <span class="nx">resourceName</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> 
    <span class="nx">lambdas</span><span class="p">:</span> <span class="p">{</span> 
        <span class="nl">create</span><span class="p">?:</span> <span class="nx">LambdaFunction</span><span class="p">,</span> 
        <span class="nx">read</span><span class="p">?:</span> <span class="nx">LambdaFunction</span><span class="p">,</span> 
        <span class="nx">update</span><span class="p">?:</span> <span class="nx">LambdaFunction</span><span class="p">,</span> 
        <span class="k">delete</span><span class="p">?:</span> <span class="nx">LambdaFunction</span> 
    <span class="p">},</span> 
    <span class="nx">credentials</span><span class="p">:</span> <span class="nx">IAM</span><span class="p">.</span><span class="nx">IamRole</span><span class="p">)</span> <span class="p">{</span>

    <span class="kd">const</span> <span class="nx">restApi</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayRestApi</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="s2">`api_gateway_rest_api_</span><span class="p">${</span><span class="nx">resourceName</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">name</span><span class="p">:</span> <span class="nx">resourceName</span><span class="p">,</span>
        <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">as per https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">tags</span><span class="p">:</span> <span class="nx">tags</span><span class="p">,</span>
        <span class="na">endpointConfiguration</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">types</span><span class="p">:</span> <span class="p">[</span><span class="dl">'</span><span class="s1">REGIONAL</span><span class="dl">'</span><span class="p">]</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">apiGatewayResource</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayResource</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="s2">`api_gateway_resource_</span><span class="p">${</span><span class="nx">resourceName</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">parentId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">rootResourceId</span><span class="p">,</span>
        <span class="na">pathPart</span><span class="p">:</span> <span class="nx">resourceName</span><span class="p">,</span>
        <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">redeploymentTriggerElements</span> <span class="o">=</span> <span class="p">[</span><span class="nx">apiGatewayResource</span><span class="p">.</span><span class="nx">id</span><span class="p">];</span>
    <span class="kd">const</span> <span class="nx">defineMethodForResource</span> <span class="o">=</span> <span class="p">(</span><span class="nx">method</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">lambda</span><span class="p">:</span> <span class="nx">LambdaFunction</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">apiGatewayMethod</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayMethod</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="s2">`api_gateway_method_</span><span class="p">${</span><span class="nx">method</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()}</span><span class="s2">_</span><span class="p">${</span><span class="nx">resourceName</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">authorization</span><span class="p">:</span> <span class="dl">"</span><span class="s2">NONE</span><span class="dl">"</span><span class="p">,</span>
        <span class="na">httpMethod</span><span class="p">:</span> <span class="nx">method</span><span class="p">.</span><span class="nx">toUpperCase</span><span class="p">(),</span>
        <span class="na">resourceId</span><span class="p">:</span> <span class="nx">apiGatewayResource</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
    <span class="p">});</span>

    <span class="kd">const</span> <span class="nx">apiGatewayMethodIntegration</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayIntegration</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="s2">`api_gateway_method_post_integration_</span><span class="p">${</span><span class="nx">resourceName</span><span class="p">}</span><span class="s2">`</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="dl">'</span><span class="s1">AWS_PROXY</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">httpMethod</span><span class="p">:</span> <span class="nx">apiGatewayMethod</span><span class="p">.</span><span class="nx">httpMethod</span><span class="p">,</span>
        <span class="na">integrationHttpMethod</span><span class="p">:</span> <span class="dl">'</span><span class="s1">POST</span><span class="dl">'</span><span class="p">,</span>
        <span class="na">resourceId</span><span class="p">:</span> <span class="nx">apiGatewayResource</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="na">uri</span><span class="p">:</span> <span class="nx">lambda</span><span class="p">.</span><span class="nx">invokeArn</span><span class="p">,</span>
        <span class="na">credentials</span><span class="p">:</span> <span class="nx">credentials</span><span class="p">.</span><span class="nx">arn</span>
    <span class="p">});</span>

    <span class="nx">redeploymentTriggerElements</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">apiGatewayMethod</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span> <span class="nx">apiGatewayMethodIntegration</span><span class="p">.</span><span class="nx">id</span><span class="p">);</span>
    <span class="p">}</span> <span class="c1">// defineRestApiResourceDeployment()</span>

    <span class="k">if</span> <span class="p">(</span><span class="nx">lambdas</span><span class="p">.</span><span class="nx">create</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">defineMethodForResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">POST</span><span class="dl">"</span><span class="p">,</span> <span class="nx">lambdas</span><span class="p">.</span><span class="nx">create</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">lambdas</span><span class="p">.</span><span class="nx">read</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">defineMethodForResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">GET</span><span class="dl">"</span><span class="p">,</span> <span class="nx">lambdas</span><span class="p">.</span><span class="nx">create</span><span class="o">!</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">lambdas</span><span class="p">.</span><span class="nx">update</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">defineMethodForResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">PUT</span><span class="dl">"</span><span class="p">,</span> <span class="nx">lambdas</span><span class="p">.</span><span class="nx">create</span><span class="o">!</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">lambdas</span><span class="p">.</span><span class="k">delete</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">defineMethodForResource</span><span class="p">(</span><span class="dl">"</span><span class="s2">DELETE</span><span class="dl">"</span><span class="p">,</span> <span class="nx">lambdas</span><span class="p">.</span><span class="nx">create</span><span class="o">!</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">const</span> <span class="nx">deployment</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">APIGateway</span><span class="p">.</span><span class="nx">ApiGatewayDeployment</span><span class="p">(</span><span class="nx">stack</span><span class="p">,</span> <span class="dl">'</span><span class="s1">api_gateway_deployment</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">restApiId</span><span class="p">:</span> <span class="nx">restApi</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
        <span class="na">triggers</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">redeployment</span><span class="p">:</span> <span class="nx">Fn</span><span class="p">.</span><span class="nx">sha1</span><span class="p">(</span><span class="nx">Fn</span><span class="p">.</span><span class="nx">jsonencode</span><span class="p">(</span><span class="nx">redeploymentTriggerElements</span><span class="p">))</span>
        <span class="p">},</span>
        <span class="na">lifecycle</span><span class="p">:</span> <span class="p">{</span>
            <span class="na">createBeforeDestroy</span><span class="p">:</span> <span class="kc">true</span>
        <span class="p">}</span>
    <span class="p">});</span>

    <span class="k">return</span> <span class="nx">deployment</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<p>If we do this for all resources, our stack definition becomes much more legible (imo):</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nx">ApiGatewayTutorialStack</span> <span class="kd">extends</span> <span class="nx">TerraformStack</span> <span class="p">{</span>
    <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">profile</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>

        <span class="k">new</span> <span class="nx">AwsProvider</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">aws</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">region</span><span class="p">:</span> <span class="dl">'</span><span class="s1">eu-west-1</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">profile</span><span class="p">:</span> <span class="nx">profile</span>
        <span class="p">})</span>

        <span class="nx">defineApiGatewayAccount</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>

        <span class="kd">const</span> <span class="nx">lambdaApiGatewayRole</span> <span class="o">=</span> <span class="nx">defineApiGatewayRole</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">sourceBucket</span> <span class="o">=</span> <span class="nx">defineSourceS3Bucket</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">franck-iac-lambda-source-bucket</span><span class="dl">'</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">sourceBucketObjectForLambdaSkeleton</span> <span class="o">=</span> <span class="nx">defineSourceBucketObjectForLambdaSkeleton</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">sourceBucket</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">lambdaFunctionForPostMethod</span> <span class="o">=</span> <span class="nx">defineLambdaFunctionForPostMethod</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">sourceBucket</span><span class="p">,</span> <span class="nx">sourceBucketObjectForLambdaSkeleton</span><span class="p">,</span> <span class="nx">lambdaApiGatewayRole</span><span class="p">);</span>

        <span class="kd">const</span> <span class="nx">restApiCredentials</span> <span class="o">=</span> <span class="nx">defineRestApiCredentials</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">lambdaFunctionForPostMethod</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">restApiDeployment</span> <span class="o">=</span> <span class="nx">defineRestApiResourceDeployment</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">dynamodbmanager</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span> <span class="na">create</span><span class="p">:</span> <span class="nx">lambdaFunctionForPostMethod</span> <span class="p">},</span> <span class="nx">restApiCredentials</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">apiGatewayDeploymentStage</span> <span class="o">=</span> <span class="nx">defineApigatewayDeploymentStage</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">v1</span><span class="dl">'</span><span class="p">,</span> <span class="nx">restApiDeployment</span><span class="p">);</span>

        <span class="c1">// output the API URL</span>
        <span class="k">new</span> <span class="nx">TerraformOutput</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">"</span><span class="s2">invoke-url</span><span class="dl">"</span><span class="p">,</span> <span class="p">{</span>
            <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Invoke URL for the API</span><span class="dl">'</span><span class="p">,</span>
            <span class="na">value</span><span class="p">:</span> <span class="nx">apiGatewayDeploymentStage</span><span class="p">.</span><span class="nx">invokeUrl</span>
        <span class="p">});</span>
    <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>Eventually, these functions could be moved to a <a href="https://www.typescriptlang.org/docs/handbook/modules.html">typescript module</a> and reused across stacks.</p>

<p>The world is my oyster.</p>

<p>You can see the final code <a href="https://github.com/franck-chester/franck-chester.github.io/blob/main/assets/files/2021-11-11-main.ts">here</a> 
and compare it to the <a href="https://github.com/franck-chester/franck-chester.github.io/blob/main/assets/files/2021-11-11-cdk.tf.json">generated HCL</a>.
My IaC user policy is <a href="https://github.com/franck-chester/franck-chester.github.io/blob/main/assets/files/2021-11-11-iac-policy.json">here</a>.</p>

<h2 id="terraform-graph">Terraform graph</h2>
<p>I would really like a pretty picture to accompany this blog, so I am going to try terraform built in <a href="https://www.terraform.io/docs/cli/commands/graph.html">graph function</a>.</p>

<p>I start by installing graphviz with chocolatey <code class="language-plaintext highlighter-rouge">choco install graphviz</code></p>

<p>I can then navigate to the generated terraform files folder <code class="language-plaintext highlighter-rouge">\day04\cdktf.out\stacks\day04</code> 
and execute <code class="language-plaintext highlighter-rouge">&gt; terraform graph | dot -Tsvg &gt; ../../../../docs/day04.svg</code></p>

<p>which gives me this <code class="language-plaintext highlighter-rouge">day04.svg</code> file:</p>

<p><img src="/assets/images/2021-11-11-day04-tfgraph.svg" alt="" /></p>

<p>Which is useful but quite ugly :frowning_face:</p>

<h2 id="conclusion">Conclusion</h2>

<p>I can see the benefits of using the terraform CDK to generate my Infrastructure as Code files. Using a strongly typed language allows for a much more legibility and flexibility than HCL</p>

<p>Next on my list are tags:
1) use them <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_iam-tags.html">to tighten my IAM policies</a>
2) check whether the terraform CDK allow, like the AWS one, tagging at <a href="https://docs.aws.amazon.com/cdk/latest/guide/tagging.html">construct level</a></p>

<p>and of course actually deploying the code for my lambda, and complete the tutorial by creating a dynamoDB table to manipulate via my API.</p>

<hr />
<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>see also this blog <a href="https://dev.to/ericksoen/teaching-terraform-from-the-ground-up-benchmarking-s3-forcedestroy-2nlf">Benchmarking S3 force_destroy</a> <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>Interestingly, unless I am horribly mistaken, the exemplar lambda in the <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html">API Gateway tutorial</a> does not return the <a href="https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-output-format">correct schema to be used with the API Gateway</a>! <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Franck</name></author><category term="iac" /><category term="terraform" /><category term="cdktf" /><summary type="html"><![CDATA[It’s been 2 week since the previous post in this series and I am really starting to enjoy the Terraform CDK.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://franck-chester.github.io//assets/images/2021-11-11-day04-tfgraph.svg" /><media:content medium="image" url="https://franck-chester.github.io//assets/images/2021-11-11-day04-tfgraph.svg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Terraform CDK - part 1</title><link href="https://franck-chester.github.io//2021/10/30/Terraform-CDK-part-1.html" rel="alternate" type="text/html" title="Terraform CDK - part 1" /><published>2021-10-30T00:00:00+00:00</published><updated>2021-10-30T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/10/30/Terraform%20CDK%20part%201</id><content type="html" xml:base="https://franck-chester.github.io//2021/10/30/Terraform-CDK-part-1.html"><![CDATA[<p>In this post I start building infrastructure components in my AWS sandbox, using <a href="https://aws.amazon.com/blogs/developer/introducing-the-cloud-development-kit-for-terraform-preview/">the recently released Terraform Cloud Development Kit (CDK)</a>.
I am going to keep it very basic, simply create an IAM role and policy, just to get myself going. What I am going to do however is dig into each little command and instructions I found in various tutorials, to make sure I understand the magic they hide from me.</p>

<p>This builds up from my previous post: <a href="/2021/10/01/Scripting-access-to-my-AWS-sandbox.html">Scripting access to my AWS sandbox</a>.
Again, do note that I run a windows machine and use the powershell terminal.</p>

<h1 id="terraform">Terraform</h1>

<p>Terraform itself is a very popular, very much de-facto standard, open standard ‘<a href="https://www.martinfowler.com/bliki/InfrastructureAsCode.html">Infrastructure as Code</a>’ (IaC) tool, created by <a href="https://www.hashicorp.com/">Hashicorp</a> for provisioning cloud infrastructures.</p>

<p>It uses configuration files, written in <a href="https://github.com/hashicorp/hcl">Hashicorp Configuration Language</a> to describe what we want our infrastructure to look like.
When executed, Terraform will compare the actual infrastructure with that desired end state, and programmatically create or destroy resources to match.
Where resources have dependencies on each other, it is smart enough to create (and later destroy) them in the right order.</p>

<p>These files can be source controlled and code reviewed, and the execution of terraform entirely automated, thus ensuring consistency and reproducibility between deployments, even across multiple environments, eliminating human error and greatly reducing the time it takes to setup infrastructure.</p>

<p>Terraform uses the concept of <a href="https://www.terraform.io/docs/language/providers/index.html">providers</a>, , that implement a standard interface over the target infrastructure components API and can then be configured via HCL.</p>

<p>I got quite adept at terraforming in my previous role, including creating my own <a href="https://www.hashicorp.com/blog/writing-custom-terraform-providers">custom provider in Go</a> to workaround a then shortcoming in the <a href="https://registry.terraform.io/providers/DataDog/datadog/latest/docs">Datadog official provider</a>.</p>

<p>HCL is great but quickly becomes a pain to work with when your target infrastructure is dynamic. As soon as you need to loop or assert, you find yourself hacking and/or writing hard to read and maintain HCL. It is also, a very ugly language to work with.</p>

<h1 id="terraform-cdk">Terraform CDK</h1>

<p><a href="https://aws.amazon.com/blogs/developer/introducing-the-cloud-development-kit-for-terraform-preview/">Announced in summer 2020</a>, Terraform Cloud Development Kit is a <a href="https://www.terraform.io/docs/cdktf/index.html">programmatic layer used to generate HCL configurations</a>.</p>

<p>This brings a host of advantages.</p>
<ol>
  <li>You get to pick and leverage your development language of choice.</li>
  <li>You can use said language to create abstraction over your infrastructure, so that instead of referring the an ‘EC2 instance’ your code can refer to ‘NGNIX server’</li>
  <li>You have (or at least eventually will get) more say over your IaC workflow, generate your HCL configuration from programmatic triggers, maybe pull data from external APIs to decide what to build or destroy, etc.</li>
</ol>

<p>It also brings a lot of pain, mainly because it <a href="https://www.terraform.io/docs/cdktf/concepts/cdktf-architecture.html">adds a few more layers</a> between your and the actual HCL files that act as the source of truth for your infrastructure. Throughout the course of writing this post, I had to fight issues with <a href="https://www.typescriptlang.org/">typescript</a>, <a href="https://nodejs.org/en/about/">node.js</a>, the terraform CDK, the <a href="https://www.terraform.io/docs/cdktf/cli-reference/cli-configuration.html">terraform CDK command line interface (CLI)</a> and the <a href="https://www.terraform.io/docs/language/syntax/configuration.html">generated HCL itself</a>. Great learning exercise, but could be a pain in production.</p>

<p>To be fair, most of this pain is down to 1) my being new to typescript and node.js, and 2) the Terraform CDK still being in development, and <a href="https://www.terraform.io/docs/cdktf/index.html#project-maturity-and-production-readiness">admittedly not ready for production</a>.</p>

<p>In fact, as I spread my exploration over a few hours every friday evening, I was (un)lucky enough to hit a few releases and breaking changes. I have now learned to check the <a href="https://github.com/hashicorp/terraform-cdk/blob/main/CHANGELOG.md">changelog</a> before starting each experiment.</p>

<h1 id="installing-the-terraform-cdk">Installing the Terraform CDK</h1>

<p>Download <strong>nodejs</strong> installer from <a href="https://nodejs.org/en/">https://nodejs.org/en/</a> or use chocolatey</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; choco install nodejs-lts
</code></pre></div></div>

<p>Download the <strong>yarn package manager</strong> from <a href="https://classic.yarnpkg.com/en/docs/install#windows-stable">https://classic.yarnpkg.com</a>, or use chocolatey</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; choco install yarn
</code></pre></div></div>

<p>Install the <strong>CDK for Terraform</strong> globally:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; npm install -g cdktf-cli
</code></pre></div></div>

<p>Finally<sup id="fnref:1" role="doc-noteref"><a href="#fn:1" class="footnote" rel="footnote">1</a></sup>, install typescript itself, globallu:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>npm install -g typescript
</code></pre></div></div>

<h2 id="cdk-terraform-project-initialisation">CDK Terraform project initialisation</h2>

<p>We create a new empty folder (<code class="language-plaintext highlighter-rouge">day03</code>) and run the <a href="https://www.terraform.io/docs/cdktf/cli-reference/commands.html#init"><code class="language-plaintext highlighter-rouge">cdktf init</code> command</a> to initialise a brand new project:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>day03&gt; cdktf init --template=typescript --local
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Newer version of Terraform CDK is available [0.6.3] - Upgrade recommended
Note: By supplying '--local' option you have chosen local storage mode for storing the state of your stack.
This means that your Terraform state file will be stored locally on disk in a file 'terraform.&lt;STACK NAME&gt;.tfstate' in the root of your project.
? projectName: day03
? projectDescription: Day 3 of my playing with the sandbox: let's terraform something...
npm notice created a lockfile as package-lock.json. You should commit this file.
+ constructs@10.0.0
+ cdktf@0.6.2
added 51 packages from 26 contributors and audited 51 packages in 29.859s       

5 packages are looking for funding
  run `npm fund` for details      

found 0 vulnerabilities

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@^2.3.2 (node_modules\jest-haste-map\node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})
+ ts-jest@27.0.5
+ jest@27.2.4
+ @types/jest@27.0.2
+ @types/node@16.10.2
+ typescript@4.4.3
added 332 packages from 296 contributors and audited 385 packages in 97.719s

29 packages are looking for funding
  run `npm fund` for details       

found 0 vulnerabilities

========================================================================================================    

  Your cdktf typescript project is ready!

  cat help                Print this message

  Compile:
    npm run get           Import/update Terraform providers and modules (you should check-in this directory)
    npm run compile       Compile typescript code to javascript (or "npm run watch")
    npm run watch         Watch for changes and compile typescript in the background
    npm run build         Compile typescript

  Synthesize:
    cdktf synth [stack]   Synthesize Terraform resources from stacks to cdktf.out/ (ready for 'terraform apply')

  Diff:
    cdktf diff [stack]    Perform a diff (terraform plan) for the given stack

  Deploy:
    cdktf deploy [stack]  Deploy the given stack

  Destroy:
    cdktf destroy [stack] Destroy the stack

  Test:
    npm run test        Runs unit tests (edit __tests__/main-test.ts to add your own tests)
    npm run test:watch  Watches the tests and reruns them on change

  Upgrades:
    npm run upgrade        Upgrade cdktf modules to latest version
    npm run upgrade:next   Upgrade cdktf modules to latest "@next" version (last commit)

 Use Prebuilt Providers:

  You can add one or multiple of the prebuilt providers listed below:

  npm install @cdktf/provider-aws
  npm install @cdktf/provider-google
  npm install @cdktf/provider-azurerm
  npm install @cdktf/provider-docker
  npm install @cdktf/provider-github
  npm install @cdktf/provider-null

  You can also build any module or provider locally. Learn more https://cdk.tf/modules-and-providers

========================================================================================================
</code></pre></div></div>

<p>Turns out I’m already out of date<sup id="fnref:2" role="doc-noteref"><a href="#fn:2" class="footnote" rel="footnote">2</a></sup> so need to <a href="https://github.com/hashicorp/terraform-cdk/blob/main/docs/upgrade-guide/upgrading-to-0.6.md">upgrade to v0.6.03</a> with <code class="language-plaintext highlighter-rouge">npm run upgrade</code>, which execute the <a href="https://docs.npmjs.com/cli/v7/commands/npm-run-script">run-script command</a> the upgrade script defined in the <code class="language-plaintext highlighter-rouge">package.json</code> file : <code class="language-plaintext highlighter-rouge">npm i cdktf@latest cdktf-cli@latest</code> .</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>day03&gt; npm run upgrade

&gt; day03@1.0.0 upgrade C:\_workspaces\tvg-sandbox\day03
&gt; npm i cdktf@latest cdktf-cli@latest


&gt; core-js-pure@3.18.1 postinstall C:\_workspaces\tvg-sandbox\day03\node_modules\core-js-pure
&gt; node -e "try{require('./postinstall')}catch(e){}"

&gt; @apollo/protobufjs@1.2.2 postinstall C:\_workspaces\tvg-sandbox\day03\node_modules\@apollo\protobufjs
&gt; node scripts/postinstall

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})
+ cdktf-cli@0.6.3
+ cdktf@0.6.3
added 418 packages from 308 contributors, updated 50 packages and audited 803 packages in 235.981s

97 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
</code></pre></div></div>

<p>As I am targetting my AWS sandbox, I need to install the <a href="https://github.com/hashicorp/cdktf-provider-aws">AWS pre-built provider</a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>day03&gt;  npm install @cdktf/provider-aws

npm WARN optional SKIPPING OPTIONAL DEPENDENCY: fsevents@2.3.2 (node_modules\fsevents):
npm WARN notsup SKIPPING OPTIONAL DEPENDENCY: Unsupported platform for fsevents@2.3.2: wanted {"os":"darwin","arch":"any"} (current: {"os":"win32","arch":"x64"})
+ @cdktf/provider-aws@2.0.11
added 1 package from 1 contributor and audited 805 packages in 45.086s

97 packages are looking for funding
  run `npm fund` for details

found 0 vulnerabilities
</code></pre></div></div>

<p>Now, I got very confused at that point, and I am going to blame the docs and various examples for it.</p>

<p><code class="language-plaintext highlighter-rouge">@cdktf/provider-aws</code> is a ‘<a href="https://www.terraform.io/docs/cdktf/concepts/providers-and-resources.html#install-pre-built-providers">pre-built provider</a>’ - that is, already in node.js format, installed in the standard <code class="language-plaintext highlighter-rouge">node_modules</code> folder, and imported from <code class="language-plaintext highlighter-rouge">@cdktf/</code>, e.g. <code class="language-plaintext highlighter-rouge">import { AwsProvider} from '@cdktf/provider-aws';</code></p>

<p>Other types of providers, such as the <a href="https://registry.terraform.io/providers/hashicorp/archive/latest/docs">Archive provider</a> need to be generated locally first:</p>

<ol>
  <li>add the provider to the <code class="language-plaintext highlighter-rouge">cdktf.json file</code> - for example
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> "terraformProviders": [
 "hashicorp/archive@~&gt;2.2.0"
 ]
</code></pre></div>    </div>
  </li>
  <li>run <a href="https://www.terraform.io/docs/cdktf/cli-reference/commands.html#get"><code class="language-plaintext highlighter-rouge">cdktf get</code></a>. This will
    <ul>
      <li>pull the provider from the terraform registry,</li>
      <li>generate the typescript constructs for that provider, that is the code that when executed will synthesise the proper terraform constructs for that provider.</li>
    </ul>
  </li>
</ol>

<p>These constructs get generated in the <code class="language-plaintext highlighter-rouge">.gen</code> folder and are imported from <code class="language-plaintext highlighter-rouge">./.gen/providers/</code>, e.g. <code class="language-plaintext highlighter-rouge">import { ArchiveProvider, DataArchiveFile } from "./.gen/providers/archive"</code>. A lot, if not most of the examples out there still use a local AWS provider, rather than the prebuilt one. 
This initially caused me to both install the pre-built modules, then build a local copy as well, and ignore the pre-built one.</p>

<h2 id="create-an-execution-role">Create an execution role</h2>

<p>My aim is eventually to port the infrastructure elements of the <a href="https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html">API gateway tutorial</a> to the Terraform CDK. The first step is to create an <a href="https://docs.aws.amazon.com/lambda/latest/dg/lambda-intro-execution-role.html">execution role</a>.</p>

<p><em>This AWS Identity and Access Management (IAM) role uses a custom policy to give your Lambda function permission to access the required AWS resources. Note that you must first create the policy and then create the execution role.</em></p>

<h2 id="code-the-execution-role">Code the execution role</h2>
<p>I edit the generated <code class="language-plaintext highlighter-rouge">main.ts</code> file to import the AWS provider and IAM resources from the pre-built provider in stalled earlier:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">AwsProvider</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@cdktf/provider-aws</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">IAM</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@cdktf/provider-aws</span><span class="dl">'</span><span class="p">;</span>
</code></pre></div></div>

<p>I can now control click on the type and find the constructor definition:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
* Create a new {@link https://www.terraform.io/docs/providers/aws/r/iam_policy.html aws_iam_policy} Resource.
*
* @param scope The scope in which to define this construct.
* @param id The scoped construct ID.
* @stability stable
*/</span>
<span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">,</span> <span class="nx">config</span><span class="p">:</span> <span class="nx">IamPolicyConfig</span><span class="p">);</span>
</code></pre></div></div>

<p>which I use to guess the following code:</p>

<p><code class="language-plaintext highlighter-rouge">main.ts</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">import</span> <span class="p">{</span> <span class="nx">Construct</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">constructs</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">App</span><span class="p">,</span> <span class="nx">TerraformStack</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">cdktf</span><span class="dl">'</span><span class="p">;</span>
<span class="k">import</span> <span class="p">{</span> <span class="nx">AwsProvider</span><span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@cdktf/provider-aws</span><span class="dl">'</span><span class="p">;</span>

<span class="k">import</span> <span class="p">{</span> <span class="nx">IAM</span> <span class="p">}</span> <span class="k">from</span> <span class="dl">'</span><span class="s1">@cdktf/provider-aws</span><span class="dl">'</span><span class="p">;</span>

<span class="kd">class</span> <span class="nx">MyStack</span> <span class="kd">extends</span> <span class="nx">TerraformStack</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">scope</span><span class="p">:</span> <span class="nx">Construct</span><span class="p">,</span> <span class="nx">id</span><span class="p">:</span> <span class="kr">string</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">super</span><span class="p">(</span><span class="nx">scope</span><span class="p">,</span> <span class="nx">id</span><span class="p">)</span>

    <span class="k">new</span> <span class="nx">AwsProvider</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">aws</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">region</span><span class="p">:</span> <span class="dl">'</span><span class="s1">eu-west-1</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">profile</span><span class="p">:</span> <span class="dl">"</span><span class="s2">franck-iac</span><span class="dl">"</span>
    <span class="p">})</span>

    <span class="kd">const</span> <span class="nx">policy</span> <span class="o">=</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">Version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2012-10-17</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">Statement</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="dl">"</span><span class="s2">Sid</span><span class="dl">"</span><span class="p">:</span> <span class="dl">""</span><span class="p">,</span>
          <span class="dl">"</span><span class="s2">Resource</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">*</span><span class="dl">"</span><span class="p">,</span>
          <span class="dl">"</span><span class="s2">Action</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
            <span class="dl">"</span><span class="s2">logs:CreateLogGroup</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:CreateLogStream</span><span class="dl">"</span><span class="p">,</span>
            <span class="dl">"</span><span class="s2">logs:PutLogEvents</span><span class="dl">"</span>
          <span class="p">],</span>
          <span class="dl">"</span><span class="s2">Effect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Allow</span><span class="dl">"</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">};</span>

    <span class="k">new</span> <span class="nx">IAM</span><span class="p">.</span><span class="nx">IamPolicy</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lambda_apigateway_policy</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
      <span class="na">name</span><span class="p">:</span><span class="dl">'</span><span class="s1">lambda_apigateway_policy</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">description</span><span class="p">:</span> <span class="dl">'</span><span class="s1">Access rights for my API Gateway lambda, as per https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html#services-apigateway-tutorial-role</span><span class="dl">'</span><span class="p">,</span>
      <span class="na">policy</span><span class="p">:</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">policy</span><span class="p">)</span>
    <span class="p">});</span>
  <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">App</span><span class="p">()</span>
<span class="k">new</span> <span class="nx">MyStack</span><span class="p">(</span><span class="nx">app</span><span class="p">,</span> <span class="dl">"</span><span class="s2">day03</span><span class="dl">"</span><span class="p">);</span>
<span class="nx">app</span><span class="p">.</span><span class="nx">synth</span><span class="p">();</span>

</code></pre></div></div>

<h3 id="generate-the-hcl-for-the-execution-role">Generate the HCL for the execution role</h3>

<p>I can execute the above <code class="language-plaintext highlighter-rouge">main.ts</code> file with the <a href="https://www.terraform.io/docs/cdktf/cli-reference/commands.html#synth">(<code class="language-plaintext highlighter-rouge">cdktf synth</code>)</a> command to <a href="https://www.terraform.io/docs/cdktf/concepts/cdktf-architecture.html#terraform">generate (aka synthesise)</a> the equivalent terraform configuration files:</p>

<p><code class="language-plaintext highlighter-rouge">cdktf.out\stacks\day03\cdk.tf.json</code>:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
  </span><span class="nl">"//"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"0.7.0"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"stackName"</span><span class="p">:</span><span class="w"> </span><span class="s2">"day03"</span><span class="p">,</span><span class="w">
      </span><span class="nl">"backend"</span><span class="p">:</span><span class="w"> </span><span class="s2">"local"</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"terraform"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"required_providers"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"aws"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"~&gt; 3.0"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"source"</span><span class="p">:</span><span class="w"> </span><span class="s2">"aws"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"provider"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"aws"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
      </span><span class="p">{</span><span class="w">
        </span><span class="nl">"profile"</span><span class="p">:</span><span class="w"> </span><span class="s2">"franck-iac"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"region"</span><span class="p">:</span><span class="w"> </span><span class="s2">"eu-west-1"</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
  </span><span class="p">},</span><span class="w">
  </span><span class="nl">"resource"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nl">"aws_iam_policy"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
      </span><span class="nl">"lambda_apigateway_policy"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nl">"description"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Access rights for my API Gateway lambda, as per https://docs.aws.amazon.com/lambda/latest/dg/services-apigateway-tutorial.html#services-apigateway-tutorial-role"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"name"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lambda_apigateway_policy"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"policy"</span><span class="p">:</span><span class="w"> </span><span class="s2">"{</span><span class="se">\"</span><span class="s2">Version</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">2012-10-17</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Statement</span><span class="se">\"</span><span class="s2">:[{</span><span class="se">\"</span><span class="s2">Sid</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Resource</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">*</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">Action</span><span class="se">\"</span><span class="s2">:[</span><span class="se">\"</span><span class="s2">logs:CreateLogGroup</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">logs:CreateLogStream</span><span class="se">\"</span><span class="s2">,</span><span class="se">\"</span><span class="s2">logs:PutLogEvents</span><span class="se">\"</span><span class="s2">],</span><span class="se">\"</span><span class="s2">Effect</span><span class="se">\"</span><span class="s2">:</span><span class="se">\"</span><span class="s2">Allow</span><span class="se">\"</span><span class="s2">}]}"</span><span class="p">,</span><span class="w">
        </span><span class="nl">"//"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
          </span><span class="nl">"metadata"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nl">"path"</span><span class="p">:</span><span class="w"> </span><span class="s2">"day03/lambda_apigateway_policy"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"uniqueId"</span><span class="p">:</span><span class="w"> </span><span class="s2">"lambda_apigateway_policy"</span><span class="w">
          </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
      </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
  </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h3 id="plan-and-apply-the-generated-configuration">Plan and apply the generated configuration</h3>

<p>The generated terraform configuration results in the following <a href="https://www.terraform.io/docs/cli/commands/plan.html">terraform plan (<code class="language-plaintext highlighter-rouge">cdktf plan</code>)</a>:</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span> <span class="nx">cdktf</span> <span class="nx">plan</span> 
<span class="nx">Stack</span><span class="err">:</span> <span class="nx">day03</span>
<span class="nx">Resources</span>
 <span class="err">+</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">p</span> <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">policy</span>

<span class="nx">Diff</span><span class="err">:</span> <span class="mi">1</span> <span class="nx">to</span> <span class="nx">create</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">to</span> <span class="nx">update</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">to</span> <span class="nx">delete</span><span class="err">.</span>
</code></pre></div></div>

<p>We are starting from a blank sandbox and therefore we should only need to create one new resource, for the policy.</p>

<p>Let’s go wild and apply this to the sandbox</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span> <span class="nx">cdktf</span> <span class="nx">apply</span>
<span class="err">⠇</span> <span class="nx">Deploying</span> <span class="nx">Stack</span><span class="err">:</span> <span class="nx">day03</span>
<span class="nx">Resources</span>
 <span class="err">⠼</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">p</span> <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">policy</span>

<span class="nx">Summary</span><span class="err">:</span> <span class="mi">0</span> <span class="nx">created</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">updated</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">destroyed</span><span class="err">.</span>
<span class="p">[</span><span class="mi">2021</span><span class="err">-</span><span class="mi">10</span><span class="err">-</span><span class="mi">29</span><span class="nx">T13</span><span class="err">:</span><span class="mi">41</span><span class="err">:</span><span class="mf">41.946</span><span class="p">]</span> <span class="p">[</span><span class="nx">ERROR</span><span class="p">]</span> <span class="nx">default</span> <span class="err">-</span> <span class="err">╷</span>
<span class="err">│</span> <span class="nx">Error</span><span class="err">:</span> <span class="nx">error</span> <span class="nx">creating</span> <span class="nx">IAM</span> <span class="nx">policy</span> <span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">policy</span><span class="err">:</span> <span class="nx">AccessDenied</span><span class="err">:</span> <span class="nx">User</span><span class="err">:</span> <span class="nx">arn</span><span class="err">:</span><span class="nx">aws</span><span class="err">:</span><span class="nx">iam</span><span class="err">::</span><span class="mi">012345678910</span><span class="err">:</span><span class="nx">user</span><span class="err">/</span><span class="nx">franck</span><span class="err">-</span><span class="nx">iac</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">authorized</span> <span class="nx">to</span> <span class="nx">perform</span><span class="err">:</span> <span class="nx">iam</span><span class="err">:</span><span class="nx">CreatePolicy</span> <span class="nx">on</span> <span class="k">resource</span><span class="err">:</span> <span class="nx">policy</span> <span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">policy</span>
</code></pre></div></div>

<p>This <code class="language-plaintext highlighter-rouge">AccessDenied</code> error makes sense, the IAM policy I attached to my IaC user is a dummy one (see <a href="/2021/10/01/Scripting-access-to-my-AWS-sandbox.html">first post in the series</a>), I haven’t actually tailored it to this project.</p>

<h2 id="revisit-our-terraforms-aws-profile-access-rights">Revisit our Terraform’s AWS profile access rights</h2>

<p>Now, sticking with a <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/best-practices.html#grant-least-privilege">least privilege</a> approach with AWS can be a struggle.
I usually do as <a href="https://aws.amazon.com/blogs/security/techniques-for-writing-least-privilege-iam-policies/">this blog</a> suggests and use the console.</p>

<p>Here, given the error message <code class="language-plaintext highlighter-rouge">iam:CreatePolicy</code>, let’s navigate to the IAM service, and look under either ‘write’ (usually associated with access right for the creation of stuff) and ‘permission management’. Bingo, it’s under the latter:</p>

<p><img src="/assets/images/2021-10-30-IAMPolicy-createPolicy.png" alt="screenshot IAM console" /></p>

<p>Now, add a resource. The console is quite emphatic that a specific resource should be specified, and quite right too: <code class="language-plaintext highlighter-rouge">*</code> is the root of all evil.
Here, we do not have a specific resource, but we can specify will will only create policy in the current account.</p>

<p>Let’s recreate our <code class="language-plaintext highlighter-rouge">iac-policy.json</code> file as:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IaC01"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="s2">"iam:CreatePolicy"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::012345678910:policy/*"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>This gives our IaC user the right to create a new policy in our account, and our account only.
I can use <a href="/2021/10/01/Scripting-access-to-my-AWS-sandbox.html">my handy <code class="language-plaintext highlighter-rouge">update-policy.ps1</code> script</a>) to easily update my IaC user’s right with this policy.</p>

<p>Let’s try again:</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span> <span class="nx">cdktf</span> <span class="nx">apply</span>
<span class="err">...</span>
<span class="nx">AccessDenied</span><span class="err">:</span> <span class="nx">User</span><span class="err">:</span> <span class="nx">arn</span><span class="err">:</span><span class="nx">aws</span><span class="err">:</span><span class="nx">iam</span><span class="err">::</span><span class="mi">012345678910</span><span class="err">:</span><span class="nx">user</span><span class="err">/</span><span class="nx">franck</span><span class="err">-</span><span class="nx">iac</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">authorized</span> <span class="nx">to</span> <span class="nx">perform</span><span class="err">:</span> <span class="nx">iam</span><span class="err">:</span><span class="nx">GetPolicy</span> <span class="nx">on</span> <span class="k">resource</span><span class="err">:</span> <span class="nx">policy</span> <span class="nx">arn</span><span class="err">:</span><span class="nx">aws</span><span class="err">:</span><span class="nx">iam</span><span class="err">::</span><span class="mi">012345678910</span><span class="err">:</span><span class="nx">policy</span><span class="err">/</span><span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">policy</span>
</code></pre></div></div>

<p>Getting there. For the lack of comprehensive documentation, I am going to go a few rounds like this, allowing additional IAM action in IaC user policy one by one.
The advantage is that I can check the <a href="https://docs.aws.amazon.com/service-authorization/latest/reference/list_identityandaccessmanagement.html">IAM actions</a> individually to understand what is going on under the hood. The disadvantage is that the process is slow and painful.</p>

<p>I have yet to find a smarter way to do this, and I am not on my own - as per this <a href="https://github.com/hashicorp/terraform/issues/2834">terraform issue</a>, and <a href="https://stackoverflow.com/questions/51273227/whats-the-most-efficient-way-to-determine-the-minimum-aws-permissions-necessary">stackoverflow</a>.
I will, one day, experiment with <a href="https://github.com/iann0036/iamlive">iamlive</a>, which would theoretically allow me to execute my terraform configuration with a super -user, log the corresponding access rights and then add these to my IaC user policy.</p>

<p>Anyway, my <code class="language-plaintext highlighter-rouge">iac-policy.json</code> ends up looking like this :</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IaC01"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"iam:CreatePolicy"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:GetPolicy"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:GetPolicyVersion"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:ListPolicyVersions"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"iam:DeletePolicy"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::012345678910:policy/*"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<h2 id="success">Success</h2>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span> <span class="nx">cdktf</span> <span class="nx">apply</span>
<span class="nx">Deploying</span> <span class="nx">Stack</span><span class="err">:</span> <span class="nx">day03</span>
<span class="nx">Resources</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">lambda_apigateway_policy</span> <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">lambda_apigateway_policy</span>

<span class="nx">Summary</span><span class="err">:</span> <span class="mi">1</span> <span class="nx">created</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">updated</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">destroyed</span><span class="err">.</span>
</code></pre></div></div>

<p>Hurrah!: Let’s peek at the IAM console… Result: we have terraformed a policy via the CDK! :smile:</p>

<p><img src="/assets/images/2021-10-30-newly_created_policy.png" alt="screenshot IAM console" /></p>

<h2 id="create-the-role">Create the role</h2>

<p>Add this to <code class="language-plaintext highlighter-rouge">main.ts</code>:</p>

<div class="language-typescript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">lambda_assume_role_policy</span> <span class="o">=</span> <span class="p">{</span>
      <span class="dl">"</span><span class="s2">Version</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">2012-10-17</span><span class="dl">"</span><span class="p">,</span>
      <span class="dl">"</span><span class="s2">Statement</span><span class="dl">"</span><span class="p">:</span> <span class="p">[</span>
        <span class="p">{</span>
          <span class="dl">"</span><span class="s2">Effect</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">Allow</span><span class="dl">"</span><span class="p">,</span>
          <span class="dl">"</span><span class="s2">Principal</span><span class="dl">"</span><span class="p">:</span> <span class="p">{</span>
            <span class="dl">"</span><span class="s2">Service</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">lambda.amazonaws.com</span><span class="dl">"</span>
          <span class="p">},</span>
          <span class="dl">"</span><span class="s2">Action</span><span class="dl">"</span><span class="p">:</span> <span class="dl">"</span><span class="s2">sts:AssumeRole</span><span class="dl">"</span>
        <span class="p">}</span>
      <span class="p">]</span>
    <span class="p">};</span>

<span class="k">new</span> <span class="nx">IAM</span><span class="p">.</span><span class="nx">IamRole</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="dl">'</span><span class="s1">lambda-apigateway-role</span><span class="dl">'</span><span class="p">,</span> <span class="p">{</span>
  <span class="na">name</span><span class="p">:</span> <span class="dl">'</span><span class="s1">lambda-apigateway-role</span><span class="dl">'</span><span class="p">,</span>
  <span class="na">assumeRolePolicy</span><span class="p">:</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">lambda_assume_role_policy</span><span class="p">)</span>
<span class="p">});</span>
</code></pre></div></div>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">Error</span><span class="err">:</span> <span class="nx">error</span> <span class="nx">creating</span> <span class="nx">IAM</span> <span class="nx">Role</span> <span class="err">(</span><span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">role</span><span class="err">):</span> <span class="nx">AccessDenied</span><span class="err">:</span> <span class="nx">User</span><span class="err">:</span> <span class="nx">arn</span><span class="err">:</span><span class="nx">aws</span><span class="err">:</span><span class="nx">iam</span><span class="err">::</span><span class="mi">012345678910</span><span class="err">:</span><span class="nx">user</span><span class="err">/</span><span class="nx">franck</span><span class="err">-</span><span class="nx">iac</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">authorized</span> <span class="nx">to</span> <span class="nx">perform</span><span class="err">:</span> <span class="nx">iam</span><span class="err">:</span><span class="nx">CreateRole</span> <span class="nx">on</span> <span class="k">resource</span><span class="err">:</span> <span class="nx">arn</span><span class="err">:</span><span class="nx">aws</span><span class="err">:</span><span class="nx">iam</span><span class="err">::</span><span class="mi">012345678910</span><span class="err">:</span><span class="nx">role</span><span class="err">/</span><span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">role</span>
</code></pre></div></div>

<p>Here we go again… After a few tries and errors, these are the access rights we need to add to the IaC role.
Note that I add them to <code class="language-plaintext highlighter-rouge">iac-policy.json</code> as a separate <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies_elements_statement.html">policy statement</a>, to try and keep track of what right is used for what.</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Sid"</span><span class="p">:</span><span class="w"> </span><span class="s2">"IaC02"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="s2">"iam:CreateRole"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"iam:GetRole"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"iam:ListRolePolicies"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"iam:ListAttachedRolePolicies"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"iam:ListInstanceProfilesForRole"</span><span class="p">,</span><span class="w">
        </span><span class="s2">"iam:DeleteRole"</span><span class="w">
    </span><span class="p">],</span><span class="w">
    </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"arn:aws:iam::012345678910:role/*"</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span> <span class="nx">cdktf</span> <span class="nx">apply</span>
<span class="nx">Deploying</span> <span class="nx">Stack</span><span class="err">:</span> <span class="nx">day03</span>
<span class="nx">Resources</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE</span>         <span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">role</span> <span class="nx">aws_iam_role</span><span class="err">.</span><span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">role</span>

<span class="nx">Summary</span><span class="err">:</span> <span class="mi">1</span> <span class="nx">created</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">updated</span><span class="err">,</span> <span class="mi">0</span> <span class="nx">destroyed</span><span class="err">.</span>
</code></pre></div></div>

<p>Our code didn’t change the policy, therefore it hasn’t been updated or destroyed.
The role itself is new, therefore has been created as a new resource, which can can see in the IAM console:</p>

<p><img src="/assets/images/2021-10-30-IAMPolicy-createRole.png" alt="screenshot IAM console" /></p>

<h2 id="cleanup">Cleanup</h2>

<p>When experimenting in the cloud is it good practice to clean up as soon as we’re done, and save ourselves money. Doesn’t really matter here, roles and policies don’t incur costs, but a good habit to get into.</p>

<div class="language-terraform highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span> <span class="nx">cdktf</span> <span class="nx">destroy</span>
<span class="nx">Destroying</span> <span class="nx">Stack</span><span class="err">:</span> <span class="nx">day03</span>
<span class="nx">Resources</span>
 <span class="err">✔</span> <span class="nx">AWS_IAM_POLICY</span>       <span class="nx">lambda_apigateway_policy</span> <span class="nx">aws_iam_policy</span><span class="err">.</span><span class="nx">lambda_apigateway_policy</span>

 <span class="err">✔</span> <span class="nx">AWS_IAM_ROLE</span>         <span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">role</span> <span class="nx">aws_iam_role</span><span class="err">.</span><span class="nx">lambda</span><span class="err">-</span><span class="nx">apigateway</span><span class="err">-</span><span class="nx">role</span>

<span class="nx">Summary</span><span class="err">:</span> <span class="mi">2</span> <span class="nx">destroyed</span><span class="err">.</span>
</code></pre></div></div>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="err">&gt;</span><span class="w"> </span><span class="o">.</span><span class="n">\teardown.ps1</span><span class="w">
</span><span class="nx">Delete</span><span class="w"> </span><span class="nx">Access</span><span class="w"> </span><span class="nx">Key</span><span class="w"> </span><span class="nx">for</span><span class="w"> </span><span class="nx">IaC</span><span class="w"> </span><span class="nx">user</span><span class="w"> </span><span class="s1">'franck-iac'</span><span class="w"> </span><span class="o">...</span><span class="w">
</span><span class="n">Detach</span><span class="w"> </span><span class="nx">policy</span><span class="w">  </span><span class="nx">to</span><span class="w"> </span><span class="nx">user</span><span class="w"> </span><span class="s1">'franck-iac'</span><span class="o">...</span><span class="w">
</span><span class="n">Delete</span><span class="w"> </span><span class="nx">IaC</span><span class="w"> </span><span class="nx">user</span><span class="w"> </span><span class="s1">'franck-iac'</span><span class="w"> </span><span class="o">...</span><span class="w">
</span><span class="n">Delete</span><span class="w"> </span><span class="nx">access</span><span class="w"> </span><span class="nx">policy</span><span class="w"> </span><span class="s1">'franck-iac'</span><span class="w"> </span><span class="o">...</span><span class="w">
</span><span class="n">Sandbox</span><span class="w"> </span><span class="nx">IaC</span><span class="w"> </span><span class="nx">user</span><span class="w"> </span><span class="nx">teardown</span><span class="w"> </span><span class="nx">complete</span><span class="w"> </span><span class="o">...</span><span class="w">
</span></code></pre></div></div>

<h2 id="conclusion">Conclusion</h2>

<p>This is all very basic but I now have a good understanding of the Terraform CDK and its foibles. I have also tested my developer workflow, and exercised my IaC scripts.</p>

<p>I will continue<sup id="fnref:3" role="doc-noteref"><a href="#fn:3" class="footnote" rel="footnote">3</a></sup> this experiment in a <a href="/2021/11/10/Terraform-CDK-part-2.html">later post</a>, deploy a lambda function, configure the API Gateway to invoke it, etc.</p>

<div class="footnotes" role="doc-endnotes">
  <ol>
    <li id="fn:1" role="doc-endnote">
      <p>This step is undocumented elsewhere, and maybe not actually required.
However, what was meant to be a quick experiment with the CDK ended up spread over 5 attempts: Things went very wrong, I kept hitting <code class="language-plaintext highlighter-rouge">MODULE_NOT_FOUND</code> errors when running <code class="language-plaintext highlighter-rouge">cdktf synth</code>. The code and all paths were fine, I and <a href="https://code.visualstudio.com/docs">vscode</a> could see all the modules, but <code class="language-plaintext highlighter-rouge">cdktf synth</code> kept failing.
On what was actually Day 07, I decided to ignored the <code class="language-plaintext highlighter-rouge">cdktf</code> commands and compile the typescript code directly (<code class="language-plaintext highlighter-rouge">tsc --build --clean</code>, <code class="language-plaintext highlighter-rouge">tsc --build --verbose</code>), which required me to install typescript (<code class="language-plaintext highlighter-rouge">npm install -g typescript</code>), which then somehow got rid of my <code class="language-plaintext highlighter-rouge">MODULE_NOT_FOUND</code> errors.
I am therefore going to assume that installing typescript separately is a pre-requisite to using the terraform CDK. 
I won’t know for sure until retry it all on a clean machine, maybe spin a container for it. <a href="#fnref:1" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:2" role="doc-endnote">
      <p>A few weeks elapsed between my installing the tooling and actually trying to use it <a href="#fnref:2" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
    <li id="fn:3" role="doc-endnote">
      <p>and <strong>TIDY UP</strong>, as I have now spotted inconsistencies in my naming terraform resources (<a href="https://www.terraform-best-practices.com/naming">should use underscore rather than hyphens</a>). <a href="#fnref:3" class="reversefootnote" role="doc-backlink">&#8617;</a></p>
    </li>
  </ol>
</div>]]></content><author><name>Franck</name></author><category term="iac" /><category term="terraform" /><category term="cdktf" /><summary type="html"><![CDATA[In this post I start building infrastructure components in my AWS sandbox, using the recently released Terraform Cloud Development Kit (CDK). I am going to keep it very basic, simply create an IAM role and policy, just to get myself going. What I am going to do however is dig into each little command and instructions I found in various tutorials, to make sure I understand the magic they hide from me.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://franck-chester.github.io//assets/images/2021-10-30-code.png" /><media:content medium="image" url="https://franck-chester.github.io//assets/images/2021-10-30-code.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Architecture descriptions in the cloud</title><link href="https://franck-chester.github.io//2021/10/22/Architecture-descriptions-in-the-cloud.html" rel="alternate" type="text/html" title="Architecture descriptions in the cloud" /><published>2021-10-22T00:00:00+00:00</published><updated>2021-10-22T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/10/22/Architecture%20descriptions%20in%20the%20cloud</id><content type="html" xml:base="https://franck-chester.github.io//2021/10/22/Architecture-descriptions-in-the-cloud.html"><![CDATA[<p>This week I have started documenting our target architecture. Now, what I was actually asked to do was “document our target cloud infrastructure”, but I have been there before and believe a formal (ish) overall architecture description is required before diving into any specific problem area.</p>

<p>I am going to use this post to describe how I use architecture descriptions and other architecture modelling techniques. I do not claim this is the only way or even the right way, but it works for me so might work for you as well.</p>

<h1 id="architecture-description">Architecture description</h1>
<p>What do I mean by an architecture description? I mean <a href="http://www.iso-architecture.org/ieee-1471/ads/">Systems and software engineering — Architecture description
ISO/IEC/IEEE 42010</a> which is an old fashion standard I was once required to adhere to for a government project.</p>

<p>Now, in those <a href="https://en.wikipedia.org/wiki/Waterfall_model">waterfall</a> days, my role as software architect was to design the solution upfront before delivering a formal, all encompassing description of it to the development teams. At the time it was easy, and a good idea, to use the viewpoints and perspectives listed in <a href="https://www.viewpoints-and-perspectives.info">Rozanski and Woods “Software Systems Architecture”</a>(R&amp;W) book. In particular the book (but sadly not the website) helped me examine my architecture through different angles and lenses, and provided a lot of <a href="https://checkify.com/blog/power-of-a-simple-checklist/">checklists</a> to validate both the solution and my description of it.</p>

<p>Today, with <a href="https://theleanway.net/The-Five-Principles-of-Lean">lean</a> and <a href="https://agilemanifesto.org/">agile</a> development processes adopted wholesale throughout the industry, I can be an <a href="https://www.agilearchitect.org/agile/principles.htm">agile architect</a>, and never again create such a big design up front.</p>

<p>I am however still a big fan of ‘proper’ architecture supported by appropriate descriptions, which often puts me at odd with the Agile (with a big A) crowd who misunderstand “<em>Working software over comprehensive documentation</em>” as meaning “<em>no documentation</em>”. I, personally, have found that the tools and techniques used to put an architecture descriptions are essential to support the conversations and eventual decisions that we take as a team, and to convey these decisions at various level of the organisation (what Gregor Hohpe calls <a href="https://architectelevator.com/">“riding the architect elevator to connect the penthouse with the engine room”</a>). My architecture descriptions now pick and choose from a multitude of modelling techniques, whatever works to best communicate a particular aspect of the solution to my stakeholders.</p>

<h1 id="format">Format</h1>

<p>As much as I love a good diagram, I make a point to use both text and diagrams, the rule being that any important information appearing in the latter will be reflected in the former - that is I never rely solely on visual information. Vice-versa, I can be quite verbose so always try to reflect what I write in supporting diagrams. The added advantages of doing so are threefold:</p>
<ol>
  <li>the act of comparing text and diagram forces me to see both through the eye of my stakeholders, and identify incongruences.</li>
  <li>iterating between text and diagram, adding or removing information from one to better align with the other generally improves the content, usually by simplifying it.</li>
  <li>I get a ready made powerpoint slide - show the picture on screen and use the text as my spiel.</li>
</ol>

<p>I have tons of books on the <a href="https://www.omg.org/spec/UML/2.5.1/PDF">Unified Modelling Language (UML)</a> and have used it extensively in my career, and know for a fact that most people don’t care for it, don’t understand it and find it ugly. And to be fair, they are mostly right.</p>

<p>When documenting a cloud architecture, it is preferable to use the prettier, and now ubiquitous cloud architecture format (square <a href="https://aws.amazon.com/architecture/icons/">icons</a>, boxes and lines) to describe the technical elements.
Where I need to include more normative information, I do still use UML, but limit myself to <a href="https://www.uml-diagrams.org/component-diagrams.html">component</a> and <a href="https://www.uml-diagrams.org/sequence-diagrams.html">sequence</a> diagrams, which are relatively accessible. For interactions I sometime use extremely parred down <a href="https://www.uml-diagrams.org/activity-diagrams.html">activity diagrams</a> but find that business stakeholders prefer the <a href="https://www.process.st/bpmn-tutorial/">Business Process Modelling Notation (BPMN)</a>.</p>

<p>Finally, for logical views, I give myself more artistic licence, and use whatever shapes and colours I need to describe any specific concept.</p>

<p>What is essential however is consistency between diagrams across the whole architecture description.</p>

<h1 id="granularity">Granularity</h1>
<p>The architecture description provides 3 increasing levels of details, roughly aligned with C4 Modelling techniques, to support communication with a wide range of stakeholders, not all of which have an understanding of our technological or business domain.</p>

<p>The <strong>high-level (macro)</strong> view will consider the elements of the solution that are our responsibility, and how these elements relate to the wider architecture of the enterprise. It very much aligns with the notion of Context in C4 modelling, and as such supports conversations with non technical stakeholders outside our team, as well as colleagues having only just joined us.</p>

<p>The <strong>intermediate (meso)</strong> view will consider the major elements of our solution, and how they relate to each other, which aligns it with the C4 Container diagram, and support conversations with non technical stakeholders within our team or outside it but aligned to our business domain. Intermediate views are also a good basis to start technical conversations, or to reproduce ad-hoc on a physical or electronic whiteboard.</p>

<p>The <strong>detailed (micro)</strong> view will consider architectural and design patterns used to implement specific aspects of our solution, very much like C4 Component diagram. Detailed views can be used to support decision making at team level (aka detailed design) as well as more formal process gates such as <a href="https://www.simplifyconsulting.co.uk/the-design-authority-unpacked/">Technical Design Authority</a> reviews or <a href="https://rmas.fad.harvard.edu/pages/change-control">change control management</a>.</p>

<p>It is important however to note that the detailled design artefacts are not themselves part of the architecture description, but refer to the patterns and guidelines documented within it.</p>

<h1 id="viewpoints">Viewpoints</h1>
<p>Viewpoints are an <a href="http://www.iso-architecture.org/ieee-1471/ads/">ISO/IEC/IEEE 42010 - Systems and software engineering — Architecture description</a> archetype. There are and have been a multitude of so-called <a href="https://en.wikipedia.org/wiki/View_model">view models</a> in our industry, but my favourite is the approach described by Rozanski and Woods (R&amp;W) by in their book “<a href="https://www.viewpoints-and-perspectives.info/">Software System Architecture</a>”, which I have adapted with a set of viewpoint better aligned (imo) with agile and cloud architecture.</p>

<h2 id="context-viewpoint">Context viewpoint</h2>
<p>The context viewpoint was apparently a late addition by R&amp;W to the second edition of their book, but is one I believe is essential to provide a solid foundation to architectural discussions and decisions.</p>

<p><a href="https://www.viewpoints-and-perspectives.info/home/viewpoints/context/">They define it</a> as:</p>

<blockquote>
  <p>The Context view of a system defines the relationships, dependencies, and interactions between the system and its environment—the people, systems, and external entities with which it interacts. It defines what the system does and does not do; where the boundaries are between it and the outside world; and how the system interacts with other systems, organizations, and people across these boundaries.</p>
</blockquote>

<p><a href="https://c4model.com/#SystemContextDiagram">C4 Modelling defines it</a> as:</p>

<blockquote>
  <p>this is your zoomed out view showing a big picture of the system landscape. The focus should be on people (actors, roles, personas, etc) and software systems rather than technologies, protocols and other low-level details. It’s the sort of diagram that you could show to non-technical people.</p>
</blockquote>

<h2 id="functional-viewpoint">Functional viewpoint</h2>
<p>R&amp;W <a href="https://www.viewpoints-and-perspectives.info/home/viewpoints/functional-viewpoint/">define it</a> as:</p>

<blockquote>
  <p>The view documents the system’s functional structure-including the key functional elements, their responsibilities, the interfaces they expose, and the interactions between them. Taken together, this demonstrates how the system will perform the functions required of it.</p>
</blockquote>

<p>whereas the <a href="https://www.cs.ubc.ca/~gregor/teaching/papers/4+1view-architecture.pdf">4+1 model</a> calls it the ‘logical view’:</p>

<blockquote>
  <p>The logical architecture primarily supports the functional requirements—what the system should provide in terms of services to its users. The system is decomposed into a set of key abstractions, taken (mostly) from the problem domain, in the form of objects or object classes. They exploit the principles of abstraction, encapsulation, and inheritance. This decomposition is not only for the sake of functional analysis, but also serves to identify common mechanisms and design elements across the various parts of the system.</p>
</blockquote>

<p>A key word in the 4+1 definition is <strong>abstractions</strong>: the principal role of the functional viewpoints for is to <strong>name things</strong>. This is where we introduce the vocabulary that will be reused throughout the architecture description, its ubiquitous language (a <a href="https://www.martinfowler.com/bliki/UbiquitousLanguage.html">term originating</a> from <a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/february/best-practice-an-introduction-to-domain-driven-design">Domain Driven Design</a>), the rule of which is “<em>a single name for each thing, and only one thing identified by any given name</em>” (my clunky wording). We must give ourselves a vocabulary precise enough to support architecture discussions and decisions without having to constantly explain what we mean. And this vocabulary must abstract lower level implementation details, to stop these discussions getting bogged down.</p>

<p>When drawn, the functional view will make heavy use of non-descript boxes and arrows, ideal for electronic and physical whiteboarding sessions.</p>

<h2 id="infrastructure-viewpoint">Infrastructure viewpoint</h2>
<p>This is my preferred term over R&amp;W ‘<a href="https://www.viewpoints-and-perspectives.info/home/viewpoints/deployment/">deployment</a>’ and 4+1 ‘physical’ viewpoints. This is where we start naming technologies and drawing cloud diagrams. What is important here is to maintain traceability between abstractions (things we described in our logical views) and their physical implementation.  This will stop us from suffering from the common disconnect between the fluffy abstraction and the nitty gritty of their implementation that has given both architecture and infrastructure such a bad name.</p>

<p>From an architecture description point of view, we must also refrain from describing every nut and bolt of our infrastructure, as there is no value in doing so. What we describe here as the elements that personify our architecture decisions, with just enough detail to explain how they do so, and no more.</p>

<h2 id="development-viewpoint">Development viewpoint</h2>
<p>Most view models have a development view, but mean different things by it. 4+1 describes it as:</p>

<blockquote>
  <p>[…] related to the ease of development, software management, reuse or commonality, and to the constraints imposed by the toolset, or the programming language</p>
</blockquote>

<p><a href="https://www.viewpoints-and-perspectives.info/home/viewpoints/development/">R&amp;W as </a></p>

<blockquote>
  <p>[…] include code structure and dependencies, build and configuration management of deliverables, system-wide design constraints, and system-wide standards to ensure technical integrity. It is the role of the Development view to address these aspects of the system development process.</p>
</blockquote>

<p>In our architecture description it will be used to bridge the gap between the what - as documented in the Logical and Infrastructure views - and the how, that is how we as a tribe go from wanting a thing to have that thing up and running in production. We will document where architecture decisions are constrained by our software development lifecycle (SDLC) and vice-versa. For example our choice of development language might limit our choice of infrastructure components or design patterns. The way we organise ourselves, our <a href="https://teamtopologies.com/key-concepts">teams topologies</a>, might impact how we assign responsibilities to specific software and/or infrastructure components. Our agile development processes and our adoption of <a href="https://docs.microsoft.com/en-us/devops/what-is-devops">DevOps</a> and <a href="https://www.devsecops.org/">DevSecOps</a> practices will also influence our architecture.</p>

<h2 id="information-viewpoint">Information viewpoint</h2>
<p>This viewpoint is again inspired <a href="https://www.viewpoints-and-perspectives.info/home/viewpoints/information/">from R&amp;W</a>:</p>

<blockquote>
  <p>[…] high-level view of static information structure and dynamic information flow, with the objective of answering the big questions around ownership, latency, references, and so forth</p>
</blockquote>

<p>Here we adapt and extend it to cover description of our <a href="https://en.wikipedia.org/wiki/Data_model">data model</a>, how and what information flows through our systems and, how and where it is stored and accessed from and who by.</p>

<p>This will support our <a href="https://docs.microsoft.com/en-us/archive/msdn-magazine/2009/february/best-practice-an-introduction-to-domain-driven-design">Domain Driven Design</a>, the definition or our interfaces, as well as threat modelling and compliance with the likes of <a href="https://www.gdpreu.org/">General Data Protection Regulation (GDPR)</a> and <a href="https://digitalguardian.com/blog/what-pci-compliance">Payment Card Industry Data Security Standards (PCI DSS)</a>.</p>

<h1 id="perspectives">Perspectives</h1>
<p>These are a concept introduced by R&amp;W and provide an elegant mechanism to address the non-functional attributes, also known as the quality attributes, or ‘-ities’ (security, availability, usability…). Rather than consider these concerns on their own, and risk being disconnected from the realities of our architecture, we acknowledge they are cross-cutting through the viewpoints described above.</p>

<p>This also enables us to <a href="https://checkify.com/blog/power-of-a-simple-checklist/">use checklists</a> to reassure ourselves our architecture description doesn’t have any blind spots. These checklists can (and should) also be used outside the architecture description as part of or day to day design activities, such as <a href="https://www.agilealliance.org/glossary/three-amigos/">3 amigo sessions</a>, or even work items’ <a href="https://www.agilealliance.org/glossary/definition-of-ready">definition of ready</a>.</p>

<p>Unfortunately, <a href="https://www.viewpoints-and-perspectives.info/home/perspectives/">R&amp;W Perspective catalogue</a> does not map very well (imo) to a modern cloud based architecture. We will instead align our architecture description with the five pillars of well architected cloud solutions (e.g. <a href="https://docs.aws.amazon.com/wellarchitected/latest/framework/welcome.html">AWS</a>, <a href="https://docs.microsoft.com/en-us/azure/architecture/framework/">Azure</a> and <a href="https://cloud.google.com/architecture/framework">GCP</a>):</p>

<h2 id="operational-perspective">Operational perspective</h2>
<p>We must ensure that our architecture supports our ability to develop, deploy, run and support the solution and its individual components. This perspective allows us to question the element described in any given viewpoint against this criteria.</p>

<p>Interestingly, R&amp;W treated Operational attributes via a <a href="https://www.viewpoints-and-perspectives.info/home/viewpoints/operational/">viewpoint of its own</a> rather than a perspective, but with DevOps, that aspect in my mind is subsummed in the Development viewpoint.</p>

<p>AWS Well-Architected Framework <a href="https://d1.awsstatic.com/whitepapers/architecture/AWS-Operational-Excellence-Pillar.pdf">Operational Excellence Pillar whitepaper</a> is an essential read to understand operational attributes of our architecture.</p>

<h2 id="security-perspective">Security perspective</h2>
<p>Here we consider whether the elements described by a given viewpoint impact:</p>

<ul>
  <li>
    <p><strong>security</strong> - how we prevent unauthorized access to organizational assets such as computers, networks, and data, and maintain the confidentiality, integrity and accessibility (so called <a href="https://www.fortinet.com/resources/cyberglossary/cia-triad">CIA triad</a>) sensitive and/or business critical information.</p>
  </li>
  <li>
    <p><strong>privacy</strong> - how we control access to Personally Identifiable Information  (PII) and other sensitive information and how it is used.</p>
  </li>
  <li>
    <p><strong>compliance</strong> - how we meet legal and regulatory requirements such as GDPR and PCI.</p>
  </li>
</ul>

<p>See also AWS Well-Architected Framework <a href="https://docs.aws.amazon.com/wellarchitected/latest/security-pillar/welcome.html?ref=wellarchitected-wp">Security Pillar whitepaper</a>.</p>

<h2 id="reliability-perspective">Reliability perspective</h2>
<p>This perspective validates that the elements described by a given viewpoint support our ability to perform correctly and consistently, and recover from failure inside or outside our control, at any scale.</p>

<p>See also AWS Well-Architected Framework <a href="https://docs.aws.amazon.com/wellarchitected/latest/reliability-pillar/welcome.html?ref=wellarchitected-wp">Reliability Pillar whitepaper</a>.</p>

<h2 id="performance-perspective">Performance perspective</h2>
<p>Here we consider how the elements described by a given viewpoint support our ability to perform consistently and efficiently regardless of the demand placed on our systems by their users. Cloud infrastructure offers elasticity, i.e. can scale in and out on demand, which must be taken into account when architecting our solution.</p>

<p>See also AWS Well-Architected Framework <a href="https://docs.aws.amazon.com/wellarchitected/latest/performance-efficiency-pillar/welcome.html?ref=wellarchitected-wp">Performance Efficiency Pillar whitepaper</a>.</p>

<h2 id="cost-perspective">Cost perspective</h2>
<p>Cloud infrastructure, and the ability to consume solutions ‘as a Service’ require us to have a clear understanding of the cost implications of our architecture decisions. The choice of components and patterns will greatly affect the overall cost of our solution, as well as the individual cost per-click/transaction. This must be considered as early as possible and become a first class concern in our decision process, weighed equally against sexier technical concerns.</p>

<p>See also AWS Well-Architected Framework <a href="https://docs.aws.amazon.com/wellarchitected/latest/cost-optimization-pillar/welcome.html?ref=wellarchitected-wp">Cost Optimization Pillar whitepaper</a>.</p>

<h1 id="summary">Summary</h1>
<p>Rather than a big monolithic amorphous chunk of documentation, architecture descriptions can be sliced and diced over 3 axes, with each cell hopefully supporting discussion and decision making within and without our team.</p>

<p><img src="/assets/images/2021-10-21-architecture-description-cube.png" alt="rubik cube like representation of the architecture description 3 axes" /></p>

<p>I will hopefully revisit the subject in later posts, notably to document my checklists and how and where I use them.</p>]]></content><author><name>Franck</name></author><category term="architecture" /><summary type="html"><![CDATA[This week I have started documenting our target architecture. Now, what I was actually asked to do was “document our target cloud infrastructure”, but I have been there before and believe a formal (ish) overall architecture description is required before diving into any specific problem area.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="https://franck-chester.github.io//assets/images/2021-10-21-architecture-description-cube.png" /><media:content medium="image" url="https://franck-chester.github.io//assets/images/2021-10-21-architecture-description-cube.png" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Configuring Git to use the proper SSH key across multiple remote repositories</title><link href="https://franck-chester.github.io//2021/10/18/Setting-up-git-ssh-with-multiple-repos.html" rel="alternate" type="text/html" title="Configuring Git to use the proper SSH key across multiple remote repositories" /><published>2021-10-18T00:00:00+00:00</published><updated>2021-10-18T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/10/18/Setting%20up%20git%20ssh%20with%20multiple%20repos</id><content type="html" xml:base="https://franck-chester.github.io//2021/10/18/Setting-up-git-ssh-with-multiple-repos.html"><![CDATA[<p>The new job uses both GitLab and BitBucket, and mandates SSH to access both.</p>

<p>Turns out this requires additional steps that weren’t documented.</p>

<p>After setting up SSH for bitbucket, my SSH connection was fine:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PS C:\_workspaces&gt; ssh-add -l
3072 SHA256:XBzl9AbCdEfGhIjKlMnOPCm3VfP9Z9M9/iB8dG7dw24 acme\franck@HALL-9001 (RSA)

PS C:\_workspaces&gt; ssh -T git@bitbucket.org
authenticated via ssh key.

You can use git to connect to Bitbucket. Shell access is disabled
</code></pre></div></div>

<p>But I was actually unable to clone a repo:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PS C:\_workspaces&gt; git clone git@bitbucket.org:acme/emar-superduperapp_ios.git
Cloning into 'emar-superduperapp_ios'...
git@bitbucket.org: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.

</code></pre></div></div>

<p>First of all, what to do when git misbehave? Turn on tracing:</p>

<p>See this SO, <a href="https://stackoverflow.com/questions/6178401/how-can-i-debug-git-git-shell-related-problems">How can I debug git/git-shell related problems?</a> and the <a href="https://git-scm.com/book/en/v2/Git-Internals-Environment-Variables#Debugging">official doc</a></p>

<p>Here, the option that helped was to turn SSH tracing on:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$</span><span class="nn">Env</span><span class="p">:</span><span class="nv">GIT_SSH_COMMAND</span><span class="o">=</span><span class="s2">"ssh -v"</span><span class="w">
</span></code></pre></div></div>

<p>I can now compare what happens when I SSH directly:</p>
<div class="language-ssh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">PS</span> C:<span class="err">\</span>_workspaces&gt; ssh -vT git@bitbucket.org
<span class="k">OpenSSH</span>_for_Windows_8.1p1, LibreSSL <span class="m">3</span>.0.2
<span class="k">debug1</span>: Connecting to bitbucket.org [104.192.141.1] port <span class="m">22</span>.
<span class="k">debug1</span>: Connection established.
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_rsa type <span class="m">0</span>
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_rsa-cert type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_dsa type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_dsa-cert type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_ecdsa type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_ecdsa-cert type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_ed25519 type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_ed25519-cert type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_xmss type -1
<span class="k">debug1</span>: identity file C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_xmss-cert type -1
<span class="k">debug1</span>: Local version string SSH-2.0-OpenSSH_for_Windows_8.1
<span class="k">debug1</span>: Remote protocol version <span class="m">2</span>.0, remote software version conker_df6142773d <span class="m">0</span>c1acfdf8d93
<span class="k">debug1</span>: <span class="no">no</span> match: conker_df6142773d <span class="m">0</span>c1acfdf8d93
<span class="k">debug1</span>: Authenticating to bitbucket.org:22 as 'git'
<span class="k">debug1</span>: SSH2_MSG_KEXINIT sent
<span class="k">debug1</span>: SSH2_MSG_KEXINIT received
<span class="k">debug1</span>: kex: algorithm: curve25519-sha256@libssh.org
<span class="k">debug1</span>: kex: host key algorithm: ssh-rsa
<span class="k">debug1</span>: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: <span class="no">none</span>
<span class="k">debug1</span>: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: <span class="no">none</span>
<span class="k">debug1</span>: expecting SSH2_MSG_KEX_ECDH_REPLY
<span class="k">debug1</span>: Server host key: ssh-rsa SHA256:zzZyXwVuTsRqPoNmLkkJYKwbHaxvSc0ojez9YXaGp1A
<span class="k">debug1</span>: Host 'bitbucket.org' is known and matches the RSA host key.
<span class="k">debug1</span>: Found key in C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/known_hosts:4
<span class="k">debug1</span>: rekey out after <span class="m">134217728</span> blocks
<span class="k">debug1</span>: SSH2_MSG_NEWKEYS sent
<span class="k">debug1</span>: expecting SSH2_MSG_NEWKEYS
<span class="k">debug1</span>: SSH2_MSG_NEWKEYS received
<span class="k">debug1</span>: rekey in after <span class="m">134217728</span> blocks
<span class="k">debug1</span>: Will attempt key: acme<span class="err">\\</span>franck@HALL-9001 RSA SHA256:XBzl9AbCdEfGhIjKlMnOPCm3VfP9Z9M9/iB8dG7dw24 agent
<span class="k">debug1</span>: Will attempt key: C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_rsa RSA SHA256:WvJsAbCdEfGhIjKlMnOP0YBFy1XWm2/P6jCL7cBmQU4
<span class="k">debug1</span>: Will attempt key: C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_dsa
<span class="k">debug1</span>: Will attempt key: C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_ecdsa
<span class="k">debug1</span>: Will attempt key: C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_ed25519
<span class="k">debug1</span>: Will attempt key: C:<span class="err">\\</span>Users<span class="err">\\</span>franck/.ssh/id_xmss
<span class="k">debug1</span>: SSH2_MSG_SERVICE_ACCEPT received
<span class="k">debug1</span>: Authentications that can continue: publickey
<span class="k">debug1</span>: Next authentication method: publickey
<span class="k">debug1</span>: Offering public key: acme<span class="err">\\</span>franck@HALL-9001 RSA SHA256:XBzl9AbCdEfGhIjKlMnOPCm3VfP9Z9M9/iB8dG7dw24 agent
<span class="k">debug1</span>: Server accepts key: acme<span class="err">\\</span>franck@HALL-9001 RSA SHA256:XBzl9AbCdEfGhIjKlMnOPCm3VfP9Z9M9/iB8dG7dw24 agent
<span class="k">debug1</span>: Authentication succeeded (publickey).
<span class="k">Authenticated</span> to bitbucket.org ([104.192.141.1]:22).
<span class="k">debug1</span>: channel <span class="m">0</span>: new [client-session]
<span class="k">debug1</span>: Entering interactive session.
<span class="k">debug1</span>: pledge: network
<span class="k">debug1</span>: client_input_channel_req: channel <span class="m">0</span> rtype exit-status reply <span class="m">0</span>
<span class="k">authenticated</span> via ssh key.

<span class="k">You</span> can use git to connect to Bitbucket. Shell access is disabled
<span class="k">debug1</span>: channel <span class="m">0</span>: free: client-session, nchannels <span class="m">1</span>
<span class="k">Transferred</span>: sent <span class="m">3008</span>, received <span class="m">1912</span> bytes, in <span class="m">0</span>.2 seconds
<span class="err">.</span><span class="k">0</span>
</code></pre></div></div>

<p>To what happens when I connect via git:</p>

<div class="language-ssh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">PS</span> C:<span class="err">\</span>_workspaces&gt; <span class="err">$</span>Env:GIT_SSH_COMMAND="ssh -v"
<span class="k">PS</span> C:<span class="err">\</span>_workspaces&gt; git clone git@bitbucket.org:acme/emar-superduperapp_ios.git
<span class="k">11</span>:00:04.773743 exec-cmd.c:237          trace: resolved executable dir: C:/Program Files/Git/mingw64/bin
<span class="k">11</span>:00:04.776745 git.c:455               trace: built-in: git clone git@bitbucket.org:acme/emar-superduperapp_ios.git
<span class="k">Cloning</span> into 'emar-superduperapp_ios'...
<span class="k">11</span>:00:04.940743 run-command.c:666       trace: run_command: unset GIT_DIR<span class="err">;</span> GIT_PROTOCOL=version=2 'ssh -v' -o SendEnv=GIT_PROTOCOL git@bitbucket.org 'git-upload-pack '<span class="err">\</span>''acme/emar-superduperapp_ios.git'<span class="err">\</span>'''
<span class="k">OpenSSH</span>_8.7p1, OpenSSL <span class="m">1</span>.1.1k  <span class="m">25</span> Mar <span class="m">2021</span>
<span class="k">debug1</span>: Reading configuration data /etc/ssh/ssh_config
<span class="k">debug1</span>: Connecting to bitbucket.org [104.192.141.1] port <span class="m">22</span>.
<span class="k">debug1</span>: Connection established.
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_rsa type <span class="m">0</span>
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_rsa-cert type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_dsa type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_dsa-cert type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ecdsa type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ecdsa-cert type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ecdsa_sk type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ecdsa_sk-cert type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ed25519 type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ed25519-cert type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ed25519_sk type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_ed25519_sk-cert type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_xmss type -1
<span class="k">debug1</span>: identity file /c/Users/franck/.ssh/id_xmss-cert type -1
<span class="k">debug1</span>: Local version string SSH-2.0-OpenSSH_8.7
<span class="k">debug1</span>: Remote protocol version <span class="m">2</span>.0, remote software version conker_df6142773d <span class="m">396556</span>d9f365
<span class="k">debug1</span>: compat_banner: <span class="no">no</span> match: conker_df6142773d <span class="m">396556</span>d9f365
<span class="k">debug1</span>: Authenticating to bitbucket.org:22 as 'git'
<span class="k">debug1</span>: load_hostkeys: fopen /c/Users/franck/.ssh/known_hosts2: No such file or directory
<span class="k">debug1</span>: load_hostkeys: fopen /etc/ssh/ssh_known_hosts: No such file or directory
<span class="k">debug1</span>: load_hostkeys: fopen /etc/ssh/ssh_known_hosts2: No such file or directory
<span class="k">debug1</span>: SSH2_MSG_KEXINIT sent
<span class="k">debug1</span>: SSH2_MSG_KEXINIT received
<span class="k">debug1</span>: kex: algorithm: curve25519-sha256@libssh.org
<span class="k">debug1</span>: kex: host key algorithm: ssh-rsa
<span class="k">debug1</span>: kex: server-&gt;client cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: <span class="no">none</span>
<span class="k">debug1</span>: kex: client-&gt;server cipher: chacha20-poly1305@openssh.com MAC: &lt;implicit&gt; compression: <span class="no">none</span>
<span class="k">debug1</span>: expecting SSH2_MSG_KEX_ECDH_REPLY
<span class="k">debug1</span>: SSH2_MSG_KEX_ECDH_REPLY received
<span class="k">debug1</span>: Server host key: ssh-rsa SHA256:zzZyXwVuTsRqPoNmLkkJYKwbHaxvSc0ojez9YXaGp1A
<span class="k">debug1</span>: load_hostkeys: fopen /c/Users/franck/.ssh/known_hosts2: No such file or directory
<span class="k">debug1</span>: load_hostkeys: fopen /etc/ssh/ssh_known_hosts: No such file or directory
<span class="k">debug1</span>: load_hostkeys: fopen /etc/ssh/ssh_known_hosts2: No such file or directory
<span class="k">debug1</span>: Host 'bitbucket.org' is known and matches the RSA host key.
<span class="k">debug1</span>: Found key in /c/Users/franck/.ssh/known_hosts:4
<span class="k">debug1</span>: rekey out after <span class="m">134217728</span> blocks
<span class="k">debug1</span>: SSH2_MSG_NEWKEYS sent
<span class="k">debug1</span>: expecting SSH2_MSG_NEWKEYS
<span class="k">debug1</span>: SSH2_MSG_NEWKEYS received
<span class="k">debug1</span>: rekey in after <span class="m">134217728</span> blocks
<span class="k">debug1</span>: Will attempt key: /c/Users/franck/.ssh/id_rsa RSA SHA256:WvJsAbCdEfGhIjKlMnOP0YBFy1XWm2/P6jCL7cBmQU4
<span class="k">debug1</span>: Will attempt key: /c/Users/franck/.ssh/id_dsa
<span class="k">debug1</span>: Will attempt key: /c/Users/franck/.ssh/id_ecdsa
<span class="k">debug1</span>: Will attempt key: /c/Users/franck/.ssh/id_ecdsa_sk
<span class="k">debug1</span>: Will attempt key: /c/Users/franck/.ssh/id_ed25519
<span class="k">debug1</span>: Will attempt key: /c/Users/franck/.ssh/id_ed25519_sk
<span class="k">debug1</span>: Will attempt key: /c/Users/franck/.ssh/id_xmss
<span class="k">debug1</span>: SSH2_MSG_SERVICE_ACCEPT received
<span class="k">debug1</span>: Authentications that can continue: publickey
<span class="k">debug1</span>: Next authentication method: publickey
<span class="k">debug1</span>: Offering public key: /c/Users/franck/.ssh/id_rsa RSA SHA256:WvJsAbCdEfGhIjKlMnOP0YBFy1XWm2/P6jCL7cBmQU4
<span class="k">debug1</span>: Authentications that can continue: publickey
<span class="k">debug1</span>: Trying private key: /c/Users/franck/.ssh/id_dsa
<span class="k">debug1</span>: Trying private key: /c/Users/franck/.ssh/id_ecdsa
<span class="k">debug1</span>: Trying private key: /c/Users/franck/.ssh/id_ecdsa_sk
<span class="k">debug1</span>: Trying private key: /c/Users/franck/.ssh/id_ed25519
<span class="k">debug1</span>: Trying private key: /c/Users/franck/.ssh/id_ed25519_sk
<span class="k">debug1</span>: Trying private key: /c/Users/franck/.ssh/id_xmss
<span class="k">debug1</span>: No more authentication methods to try.
<span class="k">git</span>@bitbucket.org: Permission denied (publickey).
<span class="k">fatal</span>: Could not read from remote repository.
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>debug1: Offering public key: /c/Users/franck/.ssh/id_rsa RSA SHA256:WvJsAbCdEfGhIjKlMnOP0YBFy1XWm2/P6jCL7cBmQU4
</code></pre></div></div>
<p>It is now obvious git is using the wrong key <code class="language-plaintext highlighter-rouge">SHA256:WvJsAbCdEfGhIjKlMnOP0YBFy1XWm2/P6jCL7cBmQU4</code> instead of <code class="language-plaintext highlighter-rouge">SHA256:XBzl9AbCdEfGhIjKlMnOPCm3VfP9Z9M9/iB8dG7dw24</code>. You can actually see the key is sourced from the default file <code class="language-plaintext highlighter-rouge">.ssh/id_rsa</code> (which is what I defaulted to when setting up SSH for github) instead of the correct <code class="language-plaintext highlighter-rouge">.ssh/bitbucket_id_rsa</code> I used when setting up SSH with bitbucket.</p>

<p>How do I fix this? 
I follow these instructions: <a href="https://www.section.io/engineering-education/using-multiple-ssh-keys-for-multiple-github-accounts/">Using Multiple SSH Keys for Multiple GitHub Accounts</a>, which tell me to <a href="https://linuxize.com/post/using-the-ssh-config-file/">setup the SSH config file</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># GitLab
Host gitlab.intranet.com
   HostName gitlab.intranet.com
   User git
   IdentityFile ~/.ssh/id_rsa
   
# BitBucket
Host bitbucket.org
   HostName bitbucket.org, 123.456.789.1
   User git
   IdentityFile ~/.ssh/bitbucket_id_rsa
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">Host</code> bit must match the name you access your repo under, i.e. the bit after the <code class="language-plaintext highlighter-rouge">@</code>. Took me a while to figure that out until I found this post : <a href="https://blog.bitsrc.io/how-to-use-multiple-git-accounts-378ead121235">How to configure multiple Git accounts in your computer</a> which made it a bit clearer.</p>

<p>Twist to the tale: turns out all this had already been very clearly documented by my colleagues, and I had actually RTFM myself, but somehow felt the need to reinvent the wheel anyway.</p>

<p>Still, now I now more about investigating git issues…</p>]]></content><author><name>Franck</name></author><category term="git" /><category term="ssh" /><summary type="html"><![CDATA[The new job uses both GitLab and BitBucket, and mandates SSH to access both.]]></summary></entry><entry><title type="html">Scripting access to my AWS sandbox</title><link href="https://franck-chester.github.io//2021/10/01/Scripting-access-to-my-AWS-sandbox.html" rel="alternate" type="text/html" title="Scripting access to my AWS sandbox" /><published>2021-10-01T00:00:00+00:00</published><updated>2021-10-01T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/10/01/Scripting%20access%20to%20my%20AWS%20sandbox</id><content type="html" xml:base="https://franck-chester.github.io//2021/10/01/Scripting-access-to-my-AWS-sandbox.html"><![CDATA[<p>Today I am documenting how I intend to use the AWS sandbox environments provided by my current employer. These are <a href="https://martinfowler.com/bliki/PhoenixServer.html">phoenix environments</a> - we can book them for anything between 1 and 7 days, after which time they get wiped out with <a href="https://github.com/rebuy-de/aws-nuke#aws-nuke">AWS nuke</a>.<br />
We get given near free rein, with <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_job-functions.html#jf_administrator"><code class="language-plaintext highlighter-rouge">AdministratorAccess</code></a>  AWS managed policy. We are also supposedly restricted in the EC2 instances size we can launch, although I have not seen this reflected in the policies attached to my user :confused: .</p>

<p>If you’ve stumbled upon these instructions from somewhere else, you might have been given an account by your employer, or more likely, as I had to do in my previous job, used your own credit card to get one and hope the <a href="https://aws.amazon.com/free/">AWS free tier</a> is enough for you to play with.</p>

<p>NB: I use a windows machine and the powershell terminal.</p>

<h2 id="pre-reqs">Pre-reqs</h2>

<h3 id="aws-cli">AWS CLI</h3>

<p>Install the AWS command line interface, v2, as per <a href="https://docs.aws.amazon.com/cli/latest/userguide/install-cliv2-windows.html">Installing, updating, and uninstalling the AWS CLI version 2 on Windows</a></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; aws --version
aws-cli/2.2.38 Python/3.8.8 Windows/10 exe/AMD64 prompt/off
</code></pre></div></div>

<h3 id="aws-powershell-tools">AWS powershell tools</h3>

<p>This is mostly to manage my iac profile and credentials, as I prefer to use the cli directly. 
However, the <a href="https://docs.aws.amazon.com/powershell/latest/reference/index.html?page=Set-AWSCredential.html&amp;tocid=Set-AWSCredential">Set-AWSCredentials</a> cmdlet will be used in my scripts to manage my cli profile.</p>

<p>Follow the instructions for <a href="https://docs.aws.amazon.com/powershell/latest/userguide/pstools-getting-set-up-windows.html#ps-installing-awstools">Installing the AWS tools for powershell on windows</a>, limiting ourselves to the <code class="language-plaintext highlighter-rouge">AWS.Tools.Common</code> module.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Install-Module -Name AWS.Tools.Installer
Install-AWSToolsModule AWS.Tools.Common -CleanUp
</code></pre></div></div>

<h2 id="book-a-sandbox">Book a sandbox</h2>

<p>This is a process internal to my current employer. They provide us with a portal that triggers a script that initialises a dedicated AWS account with a set of admin credentials, before emailing the user (that is me) with the account details and a one-time password:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Hello, franck@acme.com
Please find your login details below:

Console: https://012345678910.signin.aws.amazon.com/console/
Username: franck@acme.com
Password: 7w9cu61Tl8T0EXAMPLE 
</code></pre></div></div>

<h2 id="create-access-key-for-the-admin-user">Create access key for the admin user</h2>

<p>The first order of business is to logon to the console to create an access key for my admin user.<br />
The idea is that once I have done this, I will not use the console to manage my sandbox, but do everything via Command Line Interface (CLI) and Infrastructure as Code (IaC) scripts.</p>

<p>The admin user password must be changed on first access. I use a password I manage in my <a href="https://keepass.info/">keepass password manager</a>.</p>

<p>I then navigate to the <a href="https://console.aws.amazon.com/iam/">IAM (identity and Access Management) web console</a> to <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_access-keys.html#Using_CreateAccessKey">create an access key</a>.</p>

<p>I either keep the page up while I perform the next step, or cut and paste the key details somewhere safe.</p>

<h2 id="create-or-update-my-admin-sandbox-profile">Create or Update my admin-sandbox profile</h2>

<p>Configure a named profile as per <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-quickstart.html#cli-configure-quickstart-config">Quick configuration with <code class="language-plaintext highlighter-rouge">aws configure</code></a>.</p>

<p>Once the <code class="language-plaintext highlighter-rouge">admin-sandbox</code> profile has been created once, the existing values can be reused by simply pressing return when prompted</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; aws configure --profile admin-sandbox
AWS Access Key ID [None]: AKIAIOSFODNN7EXAMPLE
AWS Secret Access Key [None]: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
Default region name [None]: eu-west-2
Default output format [None]: json
</code></pre></div></div>

<h2 id="initialise-an-iac-specific-profile">Initialise an IaC specific profile</h2>

<p>Only need to do this once, I’ll reuse the one profile across my sandbox experiments.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; aws configure --profile franck-iac
AWS Access Key ID [None]: 
AWS Secret Access Key [None]: 
Default region name [None]: eu-west-2
Default output format [None]: json
</code></pre></div></div>

<h2 id="create-policy-via-cli">create policy via CLI</h2>

<p>I am keen on limiting my IaC user to the permissions needed for the specific experiment I am running, and nothing more.</p>

<p>Each experiment will define the IaC policy as <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html">a JSON document</a>, for example:</p>

<div class="language-json highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{</span><span class="w">
    </span><span class="nl">"Version"</span><span class="p">:</span><span class="w"> </span><span class="s2">"2012-10-17"</span><span class="p">,</span><span class="w">
    </span><span class="nl">"Statement"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
        </span><span class="p">{</span><span class="w">
            </span><span class="nl">"Effect"</span><span class="p">:</span><span class="w"> </span><span class="s2">"Allow"</span><span class="p">,</span><span class="w">
            </span><span class="nl">"Action"</span><span class="p">:</span><span class="w"> </span><span class="p">[</span><span class="w">
                </span><span class="s2">"ec2:DescribeImages"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"es:*"</span><span class="p">,</span><span class="w">
                </span><span class="s2">"ec2:CreateImage"</span><span class="w">
            </span><span class="p">],</span><span class="w">
            </span><span class="nl">"Resource"</span><span class="p">:</span><span class="w"> </span><span class="s2">"*"</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">]</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>NB: very bad example, at this stage I do not have a policy document I have actually used!</p>

<p>I can then use this file with the CLI <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/create-policy.html"><code class="language-plaintext highlighter-rouge">create-policy</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; aws iam create-policy --profile admin-sandbox --policy-name franck-iac --policy-document file://iac-policy.json --tag Key=sandbox,Value=franck-iac
{
    "Policy": {
        "PolicyName": "franck-iac",
        "PolicyId": "ANPAQSHUG5ELHLEXAMPLE",
        "Arn": "arn:aws:iam::012345678910:policy/franck-iac",
        "Path": "/",
        "DefaultVersionId": "v1",
        "AttachmentCount": 0,
        "PermissionsBoundaryUsageCount": 0,
        "IsAttachable": true,
        "CreateDate": "2021-09-30T07:00:06+00:00",
        "UpdateDate": "2021-09-30T07:00:06+00:00",
        "Tags": [
            {
                "Key": "sandbox",
                "Value": "franck-iac"
            }
        ]
    }
}
</code></pre></div></div>

<p>If and when I need to update this policy to gradually add the required access right, I will update the file and call <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/create-policy-version.html"><code class="language-plaintext highlighter-rouge">create-policy-version</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; aws iam --profile admin-sandbox create-policy-version --set-as-default --policy-arn arn:aws:iam::012345678910:policy/franck-iac --policy-document file://iac-policy.json
{
    "PolicyVersion": {
        "VersionId": "v2",
        "IsDefaultVersion": true,
        "CreateDate": "2021-10-29T13:22:09+00:00"
    }
}
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">--set-as-default</code> is important, without it our IaC user will not be attached to the new version!</p>

<p>NB: <a href="https://docs.aws.amazon.com/IAM/latest/UserGuide/access_policies_managed-versioning.html">A managed policy can have up to 5 versions</a>. Before you create a new version, we must delete an existing version (<a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/delete-policy-version.html"><code class="language-plaintext highlighter-rouge">delete-policy-version</code></a>). Here we don’t really care, therefore we’ll always delete the previous version. To script this, we’ll use <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/list-policy-versions.html"><code class="language-plaintext highlighter-rouge">list-policy-versions</code></a> and delete anything with ` “IsDefaultVersion”: false`.</p>

<h2 id="create-iac-user-via-cli">Create IaC user via CLI</h2>

<p>I use <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/create-user.html"><code class="language-plaintext highlighter-rouge">create-user</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>&gt; aws iam create-user --profile admin-sandbox --user-name franck-iac --permissions-boundary arn:aws:iam::012345678910:policy/franck-iac --tag Key=sandbox,Value=franck-iac
{
    "User": {
        "Path": "/",
        "UserName": "franck-iac",
        "UserId": "AIDAQSHUG5ELIKEXAMPLE",
        "Arn": "arn:aws:iam::012345678910:user/franck-iac",
        "CreateDate": "2021-09-30T07:05:43+00:00",
        "PermissionsBoundary": {
            "PermissionsBoundaryType": "Policy",
            "PermissionsBoundaryArn": "arn:aws:iam::012345678910:policy/franck-iac"
        },
        "Tags": [
            {
                "Key": "sandbox",
                "Value": "franck-iac"
            }
        ]
    }
}
</code></pre></div></div>

<h2 id="attach-the-policy-to-the-user">Attach the policy to the user</h2>

<p>Now, do note that the previous command set the user’s permission boundaries, that is the maximum range of what it is allowed to do, which is different from its actual permissions. These are set separately, with <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/attach-user-policy.html"><code class="language-plaintext highlighter-rouge">attach-user-policy</code></a>.</p>

<p>Here I am being either silly and/or paranoid, as I use the same policy document for boundaries and actual rights. This will guarantee that the policy is the one and only definition of what this user can do.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws iam attach-user-policy --profile admin-sandbox --user-name franck-iac --policy-arn arn:aws:iam::012345678910:policy/franck-iac --tag Key=sandbox,Value=franck-iac 

</code></pre></div></div>

<h2 id="create-access-key-for-user">Create access key for user</h2>

<p>I use <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/iam/create-access-key.html"><code class="language-plaintext highlighter-rouge">create-access-key</code></a>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>aws iam create-access-key --profile admin-sandbox  --user-name franck-iac
{
    "AccessKey": {
        "UserName": "franck-iac",
        "AccessKeyId": "AKIAQSHUG5ELFEXAMPLE",
        "Status": "Active",
        "SecretAccessKey": "ZVtmI0yh0J0Z+NhfTsIVl7Ell4PelOiXGEXAMPLE",
        "CreateDate": "2021-09-30T07:07:48+00:00"
    }
}
</code></pre></div></div>

<h2 id="save-access-keys-to-iac-user-profile">Save access keys to IaC user profile</h2>

<p>This is where we use the <a href="https://docs.aws.amazon.com/powershell/latest/reference/index.html?page=Set-AWSCredential.html&amp;tocid=Set-AWSCredential">Set-AWSCredentials</a>.</p>

<p>Worth noting that <em>on platforms that support the encrypted credential file the profile is written to the <strong>encrypted store</strong>. If the platform does not support the encrypted store (Linux, MacOS, Windows Nano Server) the profile is written to the plain text ini-format shared credential file at %HOME%.aws\credentials. To force the profile to be written to the shared credential file on systems that support both stores (i.e. Windows), specify the path and filename of the credential file using the -ProfileLocation parameter.</em></p>

<p>Our command is therefore</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Set-AWSCredential -AccessKey AKIAQSHUG5ELFEXAMPLE -SecretKey ZVtmI0yh0J0Z+NhfTsIVl7Ell4PelOiXGEXAMPLE -StoreAs franck-iac -ProfileLocation "$($env:userprofile)\.aws\credentials" 

</code></pre></div></div>

<p>At this point I now have a IaC profile I will be able to use with Terraform.</p>

<h2 id="tearing-things-down">Tearing things down</h2>

<p>Although the environment will eventually be nuked, I am keen to do the right thing and clean up after myself.</p>

<p>I will therefore generate <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-skeleton.html">cli-input.json</a> files which I’ll save locally so that they can be used the delete the policy, access key and user we’ve just created</p>

<h2 id="handle-errors-in-my-scripts">Handle errors in my scripts</h2>

<p>See <a href="https://docs.aws.amazon.com/cli/latest/userguide/cli-usage-returncodes.html#powershell">Understanding return codes from the AWS CLI</a></p>

<h2 id="putting-it-all-together">Putting it all together</h2>

<h3 id="variablesps1"><code class="language-plaintext highlighter-rouge">variables.ps1</code></h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nv">$username</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'franck-iac'</span><span class="w">
</span><span class="nv">$sandbox</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s1">'franck-iac'</span><span class="w">
</span><span class="nv">$tags</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"Key=sandbox,Value=</span><span class="nv">$sandbox</span><span class="s2">"</span><span class="w"> 

</span><span class="nv">$identity</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aws</span><span class="w"> </span><span class="nx">sts</span><span class="w"> </span><span class="nx">get-caller-identity</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ConvertFrom-Json</span><span class="w"> 
</span><span class="nv">$account</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$identity</span><span class="o">.</span><span class="nf">Account</span><span class="w">
</span></code></pre></div></div>

<h3 id="setupps1"><code class="language-plaintext highlighter-rouge">setup.ps1</code></h3>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="s2">"</span><span class="nv">$PSSCriptRoot</span><span class="s2">/variables.ps1"</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Create access policy for IaC users ..."</span><span class="w">
</span><span class="nv">$policy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">create-policy</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--policy-name</span><span class="w"> </span><span class="nv">$username</span><span class="w"> </span><span class="nt">--policy-document</span><span class="w"> </span><span class="nx">file://</span><span class="bp">$PSScriptRoot</span><span class="nx">/iac-policy.json</span><span class="w"> </span><span class="nt">--tag</span><span class="w"> </span><span class="nv">$tags</span><span class="w">

</span><span class="kr">if</span><span class="p">(</span><span class="nv">$lastexitcode</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="mi">254</span><span class="p">){</span><span class="w">
    </span><span class="c"># The command returned an error, probably because the policy already exists</span><span class="w">
    </span><span class="c">## for example if we ran this script multiple time</span><span class="w">
    </span><span class="c"># Recreate the arn from first principle (ie the account id and polic name</span><span class="w">
    </span><span class="nv">$PolicyArn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"arn:aws:iam::</span><span class="si">$(</span><span class="nv">$account</span><span class="si">)</span><span class="s2">:policy/</span><span class="si">$(</span><span class="nv">$username</span><span class="si">)</span><span class="s2">"</span><span class="w">
    </span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Attempt to retrieve existing access policy for IaC users ..."</span><span class="w">
    </span><span class="nv">$policy</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">get-policy</span><span class="w"> </span><span class="nt">--policy-arn</span><span class="w"> </span><span class="nv">$PolicyArn</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="kr">if</span><span class="p">(</span><span class="nv">$lastexitcode</span><span class="p">){</span><span class="w">
    </span><span class="n">write-error</span><span class="w"> </span><span class="s2">"Aborting script, unable to create or retrieve access policy"</span><span class="w">
    </span><span class="kr">exit</span><span class="w"> </span><span class="nt">-1</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="nv">$ap</span><span class="w"> </span><span class="o">=</span><span class="w">  </span><span class="nv">$policy</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ConvertFrom-Json</span><span class="w">  
</span><span class="nv">$policyArn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$ap</span><span class="o">.</span><span class="nf">Policy</span><span class="o">.</span><span class="nf">Arn</span><span class="w">
</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Created access policy for IaC users, ARN = </span><span class="nv">$policyArn</span><span class="s2">"</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Create IaC user '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
</span><span class="nv">$u</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">create-user</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--user-name</span><span class="w"> </span><span class="nv">$username</span><span class="w"> </span><span class="nt">--permissions-boundary</span><span class="w"> </span><span class="nv">$policyArn</span><span class="w"> </span><span class="nt">--tag</span><span class="w"> </span><span class="nv">$tags</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ConvertFrom-Json</span><span class="w">  
</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Created IaC user '</span><span class="nv">$username</span><span class="s2">', ARN = </span><span class="si">$(</span><span class="nv">$u</span><span class="o">.</span><span class="nf">User</span><span class="o">.</span><span class="nf">Arn</span><span class="si">)</span><span class="s2">"</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Attach policy </span><span class="nv">$policyArn</span><span class="s2"> to user '</span><span class="nv">$username</span><span class="s2">'..."</span><span class="w">
</span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">attach-user-policy</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--user-name</span><span class="w"> </span><span class="nv">$username</span><span class="w"> </span><span class="nt">--policy-arn</span><span class="w"> </span><span class="nv">$policyArn</span><span class="w"> </span><span class="nt">--tag</span><span class="w"> </span><span class="nv">$tags</span><span class="w"> 

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Create access key for IaC user '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
</span><span class="nv">$ak</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">create-access-key</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--user-name</span><span class="w"> </span><span class="nv">$username</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ConvertFrom-Json</span><span class="w">  
</span><span class="nv">$accesskeyId</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$ak</span><span class="o">.</span><span class="nf">AccessKey</span><span class="o">.</span><span class="nf">AccessKeyId</span><span class="w">
</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Create cli-input file for eventual call to delete-access-key when we tear this down......"</span><span class="w">
</span><span class="sh">@"
{
    "UserName": "</span><span class="nv">$username</span><span class="sh">",
    "AccessKeyId": "</span><span class="nv">$accesskeyId</span><span class="sh">"
}
"@</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">set-content</span><span class="w"> </span><span class="s2">"</span><span class="bp">$PSScriptRoot</span><span class="s2">/cli-input-delete-access-key.json"</span><span class="w">
</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Created access key for IaC user '</span><span class="nv">$username</span><span class="s2">', ID = </span><span class="nv">$accesskeyId</span><span class="s2">"</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Update profile for IaC user '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
</span><span class="n">Set-AWSCredential</span><span class="w"> </span><span class="nt">-AccessKey</span><span class="w"> </span><span class="nv">$accesskeyId</span><span class="w"> </span><span class="nt">-SecretKey</span><span class="w"> </span><span class="nv">$ak</span><span class="o">.</span><span class="nf">AccessKey</span><span class="o">.</span><span class="nf">SecretAccesskey</span><span class="w"> </span><span class="nt">-StoreAs</span><span class="w"> </span><span class="nv">$username</span><span class="w"> </span><span class="nt">-ProfileLocation</span><span class="w"> </span><span class="s2">"</span><span class="si">$(</span><span class="nv">$</span><span class="nn">env</span><span class="p">:</span><span class="nv">userprofile</span><span class="si">)</span><span class="s2">\.aws\credentials"</span><span class="w"> 
</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Updated profile for IaC user '</span><span class="nv">$username</span><span class="s2">' . "</span><span class="w">

</span><span class="n">Write-host</span><span class="w"> </span><span class="s2">"All done - you can now terraform at will"</span><span class="w">
</span></code></pre></div></div>

<h3 id="update-policyps1"><code class="language-plaintext highlighter-rouge">update-policy.ps1</code></h3>

<p>This is the script I run everytime I need to tweak my IaC user access right by editing <code class="language-plaintext highlighter-rouge">iac-policy.json</code>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="s2">"</span><span class="nv">$PSSCriptRoot</span><span class="s2">/variables.ps1"</span><span class="w">

</span><span class="c"># Recreate the arn from first principle (ie the account id and polic name</span><span class="w">
</span><span class="nv">$PolicyArn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"arn:aws:iam::</span><span class="si">$(</span><span class="nv">$account</span><span class="si">)</span><span class="s2">:policy/</span><span class="si">$(</span><span class="nv">$username</span><span class="si">)</span><span class="s2">"</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Create new default version of policy '</span><span class="nv">$username</span><span class="s2">' / </span><span class="nv">$PolicyArn</span><span class="s2">..."</span><span class="w">
</span><span class="nv">$pv</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">create-policy-version</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--set</span><span class="o">-as</span><span class="nt">-default</span><span class="w"> </span><span class="nt">--policy-document</span><span class="w"> </span><span class="nx">file://iac-policy.json</span><span class="w"> </span><span class="nt">--policy-arn</span><span class="w"> </span><span class="nv">$PolicyArn</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ConvertFrom-Json</span><span class="w">  
</span><span class="kr">if</span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$lastexitcode</span><span class="p">){</span><span class="w">
    </span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Created version </span><span class="si">$(</span><span class="nv">$pv</span><span class="o">.</span><span class="nf">PolicyVersion</span><span class="o">.</span><span class="nf">VersionId</span><span class="si">)</span><span class="s2"> of policy '</span><span class="nv">$username</span><span class="s2">'"</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Delete previous versions of policy '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
</span><span class="nv">$pl</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">list-policy-versions</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--policy-arn</span><span class="w"> </span><span class="nv">$PolicyArn</span><span class="w"> </span><span class="o">|</span><span class="w"> </span><span class="n">ConvertFrom-Json</span><span class="w">  
</span><span class="kr">foreach</span><span class="w"> </span><span class="p">(</span><span class="nv">$v</span><span class="w"> </span><span class="kr">in</span><span class="w"> </span><span class="nv">$pl</span><span class="o">.</span><span class="nf">Versions</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="o">-not</span><span class="w"> </span><span class="nv">$v</span><span class="o">.</span><span class="nf">IsDefaultVersion</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Delete version </span><span class="si">$(</span><span class="nv">$v</span><span class="o">.</span><span class="nf">VersionId</span><span class="si">)</span><span class="s2"> of access policy '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
        </span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">delete-policy-version</span><span class="w">  </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--policy-arn</span><span class="w"> </span><span class="nv">$PolicyArn</span><span class="w"> </span><span class="nt">--version-id</span><span class="w"> </span><span class="nv">$v</span><span class="o">.</span><span class="nf">VersionId</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Delete previous versions of policy '</span><span class="nv">$username</span><span class="s2">': done"</span><span class="w">

</span></code></pre></div></div>

<h3 id="teardownps1"><code class="language-plaintext highlighter-rouge">teardown.ps1</code></h3>

<p>The teardown script is all about undoing everything `setup.ps1’ did, in reverse order.
The order matters, you cannot delete a policy that is attached to a user.</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">.</span><span class="s2">"</span><span class="nv">$PSSCriptRoot</span><span class="s2">/variables.ps1"</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Delete Access Key for IaC user '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
</span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">delete-access-key</span><span class="w">  </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--cli-input-json</span><span class="w"> </span><span class="nx">file://</span><span class="bp">$PSScriptRoot</span><span class="nx">/cli-input-delete-access-key.json</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Detach policy </span><span class="nv">$policyArn</span><span class="s2"> to user '</span><span class="nv">$username</span><span class="s2">'..."</span><span class="w">
</span><span class="c"># Recreate the arn from first principle (ie the account id and polic name</span><span class="w">
</span><span class="nv">$PolicyArn</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">"arn:aws:iam::</span><span class="si">$(</span><span class="nv">$account</span><span class="si">)</span><span class="s2">:policy/</span><span class="si">$(</span><span class="nv">$username</span><span class="si">)</span><span class="s2">"</span><span class="w">
</span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">detach-user-policy</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--user-name</span><span class="w"> </span><span class="nv">$username</span><span class="w"> </span><span class="nt">--policy-arn</span><span class="w"> </span><span class="nv">$policyArn</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Delete IaC user '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
</span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">delete-user</span><span class="w">  </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--user-name</span><span class="w"> </span><span class="nv">$username</span><span class="w"> 

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Delete access policy '</span><span class="nv">$username</span><span class="s2">' ..."</span><span class="w">
</span><span class="n">aws</span><span class="w"> </span><span class="nx">iam</span><span class="w"> </span><span class="nx">delete-policy</span><span class="w"> </span><span class="nt">--profile</span><span class="w"> </span><span class="nx">admin-sandbox</span><span class="w"> </span><span class="nt">--policy-arn</span><span class="w"> </span><span class="nv">$PolicyArn</span><span class="w">

</span><span class="n">write-host</span><span class="w"> </span><span class="s2">"Sandbox IaC user teardown complete ..."</span><span class="w">

</span></code></pre></div></div>

<h2 id="what-next">What next?</h2>

<p>I’ll want to invoke <a href="https://awscli.amazonaws.com/v2/documentation/api/latest/reference/ce/get-cost-and-usage.html">get-cost-and-usage</a> to get an idea of the overall cost of my experiment.</p>

<p>I’ll also want to parametrise the scripts to allow me to pass the policy file name as an argument, allow me to have experiment specific policies.</p>

<p>That said, the next post in this series will be about me <a href="/2021/10/30/Terraform-CDK-part-1.html">using the Terraform CDK to setup infrastructure in the sandbox</a>.</p>]]></content><author><name>Franck</name></author><category term="aws-cli" /><category term="sandbox" /><category term="iac" /><summary type="html"><![CDATA[Today I am documenting how I intend to use the AWS sandbox environments provided by my current employer. These are phoenix environments - we can book them for anything between 1 and 7 days, after which time they get wiped out with AWS nuke. We get given near free rein, with AdministratorAccess AWS managed policy. We are also supposedly restricted in the EC2 instances size we can launch, although I have not seen this reflected in the policies attached to my user :confused: .]]></summary></entry><entry><title type="html">Installing Podman on WSL2</title><link href="https://franck-chester.github.io//2021/09/30/Installing-podman-on-WSL2.html" rel="alternate" type="text/html" title="Installing Podman on WSL2" /><published>2021-09-30T00:00:00+00:00</published><updated>2021-09-30T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/09/30/Installing%20podman%20on%20WSL2</id><content type="html" xml:base="https://franck-chester.github.io//2021/09/30/Installing-podman-on-WSL2.html"><![CDATA[<p>As I have a new laptop to go with the new job I am setting up my usual toolset on it.</p>

<p>One thing I need is the ability to run containers locally, ideally grouped via <a href="https://docs.docker.com/compose/">docker-compose</a> as I have a few personal projects that already use it.</p>

<p>Unfortunately, <a href="https://docs.docker.com/desktop/">Docker Desktop</a>, is no longer free to use and requires a licence for large enterprises like Very. I quick google search leads me to this <a href="https://dev.to/bowmanjd/install-docker-on-windows-wsl-without-docker-desktop-34m9">article on running docker on WSL without Docker Desktop</a>.</p>

<p>The article itself indicates that using <a href="https://podman.io/">podman</a> would be a nice and maybe easier alternative, as Podman doesn’t require a daemon, whereas docker needs systemd and <a href="https://github.com/systemd/systemd/issues/8036">WSL2 doesn’t have systemd out of the box</a>.</p>

<p>Podman can now also <a href="https://www.redhat.com/sysadmin/podman-docker-compose">run docker-compose files</a>, therefore I am going to try that first and follow this other article by the same author : <a href="https://dev.to/bowmanjd/using-podman-on-windows-subsystem-for-linux-wsl-58ji">Using podman instead of docker on Windows Subsystem for Linux (WSL 2)</a></p>

<h2 id="install-wsl2">Install WSL2</h2>

<p>Using these <a href="https://docs.microsoft.com/en-us/windows/wsl/setup/environment#set-up-your-linux-user-info">instructions</a>.</p>

<h2 id="upgrade-ubuntu-to-2104">Upgrade Ubuntu to 21.04</h2>
<p>Unfortunately, the WSL2 install will only deploy the latest <a href="https://ubuntu.com/about/release-cycle">LTS version</a> of the corresponding Linux distribution.<br />
For Ubuntu, this is <a href="https://ubuntu.com/blog/what-is-an-ubuntu-lts-release">20.04 LTS</a> which was published in April (04) 2020.</p>

<p>However, the Podman installation package is included in the native repositories of Ubuntu since 20.10, and the latest (tho not LTS) version is <a href="https://discourse.ubuntu.com/t/hirsute-hippo-release-notes/19221">Ubuntu 21.04 (Hirsute Hippo)</a>.</p>

<p>As this is meant to be my sandbox for learning, I might as well upgrade to 21.04.</p>

<p>I’ll use these <a href="https://www.windowscentral.com/how-upgrade-ubuntu-2010-wsl-windows-10">instructions</a>.
However, these hit an undocumented snag, once again caused by the absence of <code class="language-plaintext highlighter-rouge">systemd</code> in WSL.<br />
The explanation and the fix for this is <a href="https://github.com/microsoft/WSL/issues/6942#issuecomment-842629885">documented here</a>.</p>

<h2 id="install-podman">Install Podman</h2>

<p>I follow the <a href="https://podman.io/getting-started/installation.html#linux-distributions">official instructions</a>, which, now that I am running on 21.04, consist of:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">sudo </span>apt-get <span class="nt">-y</span> update
<span class="nb">sudo </span>apt-get <span class="nt">-y</span> <span class="nb">install </span>podman
</code></pre></div></div>

<p>NB: on Ubuntu, we need to add docker.io as a default search registry in order to pull containers by their short name (see <a href="https://github.com/containers/podman/issues/9390#issuecomment-876994582">Shortnames are broken in 3.0.0 due to missing list of unqualified-search registries </a>), by adding this line to <code class="language-plaintext highlighter-rouge">/etc/containers/registries.conf</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>unqualified-search-registries=["docker.io"]
</code></pre></div></div>

<h2 id="alias-vs-code">Alias vs-code</h2>

<p>Thanks to Visual Studio Code (vscode) <a href="https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.remote-wsl">Remote - WSL</a> extension, I can launch my favourite IDE from WSL2 command line: <code class="language-plaintext highlighter-rouge">code .</code>.</p>

<p>Actually I can’t because I run <a href="https://code.visualstudio.com/blogs/2016/05/23/evolution-of-insiders">Visual Studio Code (vscode) Insider Build</a> coz I’m a software architect, code mostly for fun and can therefore live with a potentially unstable environment.
The executable for this is an unyieldy <code class="language-plaintext highlighter-rouge">code-insider</code>.</p>

<p>No problem, I just need to alias the command, which I barely remembered how to do :grin: : edit  <code class="language-plaintext highlighter-rouge">~/.bashrc</code> and add a line that reads <code class="language-plaintext highlighter-rouge">alias code='code-insiders'</code>.</p>

<h2 id="install-git">Install Git</h2>

<p>WSL basically installs its own file system, therefore, when developing in WSL2, I need a separate workspace and a separate instance of git.</p>

<p>Follow these <a href="https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-git">instructions</a>, in particular the bit about the <a href="https://docs.microsoft.com/en-us/windows/wsl/tutorials/wsl-git#git-credential-manager-setup">credential manager</a>.</p>

<p>And that’s me done… I actually haven’t run any container yet, I’ll need to resurrect some old project of mine, or start a new one…</p>]]></content><author><name>Franck</name></author><category term="podman" /><category term="docker" /><category term="containers" /><category term="wsl2" /><category term="ubuntu" /><summary type="html"><![CDATA[As I have a new laptop to go with the new job I am setting up my usual toolset on it.]]></summary></entry><entry><title type="html">Generate Jekyll pages with GitHub actions</title><link href="https://franck-chester.github.io//2021/09/29/Generate-Jekyll-pages-with-GitHub-actions.html" rel="alternate" type="text/html" title="Generate Jekyll pages with GitHub actions" /><published>2021-09-29T00:00:00+00:00</published><updated>2021-09-29T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/09/29/Generate%20Jekyll%20pages%20with%20GitHub%20actions</id><content type="html" xml:base="https://franck-chester.github.io//2021/09/29/Generate-Jekyll-pages-with-GitHub-actions.html"><![CDATA[<p>Now that I have <a href="/2021/09/28/customising-jekyll.html">customised Jekyll</a> I want to simplify my workflow.</p>

<p>Although I am starting this with a bunch of actual posts, most of my content will be links. I usually share these as soon as I’ve followed the link and read the content, usually straight from my phone while browsing in the evening.</p>

<p>I therefore need the ability to generate <em>links</em> entries on my site as easily as possible, from my phone.</p>

<p>My plan is to use <a href="https://github.blog/changelog/2020-07-06-github-actions-manual-triggers-with-workflow_dispatch/">GitHub actions with a manual trigger</a> to generate the markdown files, with <a href="https://docs.github.com/en/actions/creating-actions/metadata-syntax-for-github-actions#inputs">action inputs</a> matched to the required front-matter variables.</p>

<h2 id="generate-files-with-github-actions">Generate files with GitHub actions</h2>

<p>First of all, what do I need to generate files in my repository from a GitHub action? 
We’ll the <a href="https://github.com/marketplace/actions/write-file">Write File Action</a>, as echoing <code class="language-plaintext highlighter-rouge">echo</code> each line in a <a href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions#jobsjob_idstepsrun"><code class="language-plaintext highlighter-rouge">run</code> step</a> looks like a pain.</p>

<p>The content of the file is easier to define as a <a href="https://alisoftware.github.io/yaml/2021/08/19/yaml-part2-strings/">multiline string</a>, indicated wth a pipe <code class="language-plaintext highlighter-rouge">|</code>.</p>

<p>I also need to set the date in the filename. 
I’ll do it as per this <a href="https://stackoverflow.com/a/60942437">SO answer</a>, which uses the <a href="https://docs.github.com/en/actions/learn-github-actions/workflow-commands-for-github-actions"><code class="language-plaintext highlighter-rouge">::set-output::</code> workflow command</a>.</p>

<p>Finally, we need to <a href="https://lannonbr.com/blog/2019-12-09-git-commit-in-actions">commit the file back to main</a>.
Unfortunately this doesn’t trigger our jekyll build action, as explained <a href="https://github.community/t/github-action-not-triggering-gh-pages-upon-push/16096">here</a> :sad:</p>

<p>At this stage I have not figured out why using a personal token hasn’t worked around this issue…. To be continued</p>

<p>Plan B is to use a <code class="language-plaintext highlighter-rouge">repository_dispatch</code> event trigger as per <a href="https://blog.marcnuri.com/triggering-github-actions-across-different-repositories">this article</a>.</p>

<p>Which works!!</p>

<p>Final workflow definition looks like this (check the repo for the latest definition)</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">name</span><span class="pi">:</span> <span class="s">Generate a new file in the _links folder</span>

<span class="na">on</span><span class="pi">:</span>
  <span class="na">workflow_dispatch</span><span class="pi">:</span>
    <span class="na">inputs</span><span class="pi">:</span>
      <span class="na">title</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">A</span><span class="nv"> </span><span class="s">user</span><span class="nv"> </span><span class="s">friendly</span><span class="nv"> </span><span class="s">name/description</span><span class="nv"> </span><span class="s">for</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">URL</span><span class="nv"> </span><span class="s">we</span><span class="nv"> </span><span class="s">are</span><span class="nv"> </span><span class="s">sharing'</span>     
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">target</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">The</span><span class="nv"> </span><span class="s">URL</span><span class="nv"> </span><span class="s">we</span><span class="nv"> </span><span class="s">are</span><span class="nv"> </span><span class="s">sharing'</span>     
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">'</span>
      <span class="na">source</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Where</span><span class="nv"> </span><span class="s">(free</span><span class="nv"> </span><span class="s">text)</span><span class="nv"> </span><span class="s">did</span><span class="nv"> </span><span class="s">we</span><span class="nv"> </span><span class="s">find</span><span class="nv"> </span><span class="s">out</span><span class="nv"> </span><span class="s">about</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">URL</span><span class="nv"> </span><span class="s">we</span><span class="nv"> </span><span class="s">are</span><span class="nv"> </span><span class="s">sharing'</span>     
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">the</span><span class="nv"> </span><span class="s">internet'</span>
      <span class="na">source_url</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Where</span><span class="nv"> </span><span class="s">(URL)</span><span class="nv"> </span><span class="s">did</span><span class="nv"> </span><span class="s">we</span><span class="nv"> </span><span class="s">find</span><span class="nv"> </span><span class="s">out</span><span class="nv"> </span><span class="s">about</span><span class="nv"> </span><span class="s">the</span><span class="nv"> </span><span class="s">URL</span><span class="nv"> </span><span class="s">we</span><span class="nv"> </span><span class="s">are</span><span class="nv"> </span><span class="s">sharing'</span>     
        <span class="na">required</span><span class="pi">:</span> <span class="no">false</span>
      <span class="na">tags</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Space</span><span class="nv"> </span><span class="s">separated</span><span class="nv"> </span><span class="s">list</span><span class="nv"> </span><span class="s">of</span><span class="nv"> </span><span class="s">tags'</span>     
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
      <span class="na">blurb</span><span class="pi">:</span>
        <span class="na">description</span><span class="pi">:</span> <span class="s1">'</span><span class="s">Some</span><span class="nv"> </span><span class="s">text</span><span class="nv"> </span><span class="s">to</span><span class="nv"> </span><span class="s">explain</span><span class="nv"> </span><span class="s">why</span><span class="nv"> </span><span class="s">you</span><span class="nv"> </span><span class="s">are</span><span class="nv"> </span><span class="s">sharing'</span>     
        <span class="na">required</span><span class="pi">:</span> <span class="no">true</span>
        <span class="na">default</span><span class="pi">:</span> <span class="s1">'</span><span class="s">This</span><span class="nv"> </span><span class="s">looks</span><span class="nv"> </span><span class="s">interesting...'</span>

<span class="na">jobs</span><span class="pi">:</span>
  <span class="na">newlink</span><span class="pi">:</span>
    <span class="na">runs-on</span><span class="pi">:</span> <span class="s">ubuntu-latest</span>
    <span class="na">steps</span><span class="pi">:</span>
      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Clone repository</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">actions/checkout@v2</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Generate the filename</span>
        <span class="na">id</span><span class="pi">:</span> <span class="s">filename</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">date="$(date +'%Y-%m-%d')"</span>
          <span class="s">filename="${date}-$.md"</span>
          <span class="s">echo "filename = ${filename}"</span>
          <span class="s">echo "::set-output name=filename::${filename}"</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Generate new link file</span>
        <span class="na">uses</span><span class="pi">:</span> <span class="s">DamianReeves/write-file-action@v1.0</span>
        <span class="na">with</span><span class="pi">:</span>
          <span class="na">path</span><span class="pi">:</span> <span class="s">_links/$</span>
          <span class="na">write-mode</span><span class="pi">:</span> <span class="s">append</span>
          <span class="na">contents</span><span class="pi">:</span> <span class="pi">|</span>
            <span class="s">---</span>
            <span class="s">title: $</span>
            <span class="s">target : $</span>
            <span class="s">source : $</span>
            <span class="s">source_url : $</span>
            <span class="s">tags: $</span>
            <span class="s">---</span>

            <span class="s">$</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Commit and push files</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">git config user.name "NewLink GitHub Action"</span>
          <span class="s">git config user.email "&lt;&gt;"</span>
          <span class="s">git add _links/$</span>
          <span class="s">git commit -m "New link: $"</span>
          <span class="s">git push https://$@github.com/$.git main</span>

      <span class="pi">-</span> <span class="na">name</span><span class="pi">:</span> <span class="s">Trigger jekyll build</span>
        <span class="na">run</span><span class="pi">:</span> <span class="pi">|</span>
          <span class="s">curl -X POST https://api.github.com/repos/$/dispatches \</span>
          <span class="s">-H 'Accept: application/vnd.github.everest-preview+json' \</span>
          <span class="s">-u $ \</span>
          <span class="s">--data '{"event_type": "New link: $", "client_payload": { "customField": "customValue" }}'</span>

</code></pre></div></div>]]></content><author><name>Franck</name></author><category term="github" /><category term="jekyll" /><summary type="html"><![CDATA[Now that I have customised Jekyll I want to simplify my workflow.]]></summary></entry><entry><title type="html">Customising Jekyll</title><link href="https://franck-chester.github.io//2021/09/28/customising-jekyll.html" rel="alternate" type="text/html" title="Customising Jekyll" /><published>2021-09-28T00:00:00+00:00</published><updated>2021-09-28T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/09/28/customising%20jekyll</id><content type="html" xml:base="https://franck-chester.github.io//2021/09/28/customising-jekyll.html"><![CDATA[<p>Following my initial setup of Jekyll (as per <a href="/2021/09/27/jekyll.html">Setting up my GitHub page with Jekyll</a>), I now want to customise the site to meet my personal requirements.</p>

<p>First of all, I do not intend to blog daily, not really my style. I am however a prolific internet browser, and like to share interesting links I stumble about. 
I do not like cross-posting, therefore I usually have to chose whether to share on twitter, linkedin or my current job’s intranet. 
This means that 1) I might not reach the right audience and 2) I later cannot find these interesting links when their subject matter becomes relevant to the job at hand.</p>

<p>I therefore want to use this site to curate links, and make it as easy as possible for me to write and publish the information, ideally as easy as it would be when I share to social media. 
<em>Links</em> will be managed as a separate Jekyll <a href="https://jekyllrb.com/docs/collections/">collection</a> so that:</p>
<ul>
  <li>they do not appear in the main feed, as it would dilute it and make it boring</li>
  <li>get styled differently from <em>posts</em>, mainly to use <a href="https://jekyllrb.com/docs/front-matter/#custom-variables">front-matter custom variables</a> to define the link, giving it a title, a url, a source and some optional descriptive content (although tbf, this is usually limited to ‘<em>hey, this is interesting</em>’)</li>
</ul>

<p>Second, I am keen on tagging content. Again, this is to allow me to find my own material at a later date. 
Now, unfortunately, Jekyll is not consistent in how it exposes tagged content, with <code class="language-plaintext highlighter-rouge">site.tags</code> only returning the tags used on <em>posts</em>, while <em>collections</em> need to be iterated separately to find the tags.<br />
I will therefore need to customise (aka hack) So-Solid’s <a href="https://github.com/mmistakes/so-simple-theme#layout-tags">tags layout</a> to include tagged <em>links</em>.</p>

<p>Finally, I want to emulate a colleague of mine (<em>hi Paul!</em>) who publishes a weekly summary of his reading/viewing/listening to our colleagues, which is a much better way to do it than my wanton posting on random intranet channels.
I will therefore create yet another collection, <em>weekending</em>, with its own custom layout, to group <em>posts</em> and <em>links</em> per week, with an optional blurb should I want to expand on my tech activities that week.</p>

<p><em>Update March 22:</em> I wasn’t posting often enough to generate any useful weekly summaries, so have now deleted this section of the site.</p>

<h2 id="collections">Collections</h2>

<p>As per the instructions, add this to my <code class="language-plaintext highlighter-rouge">_config.yaml</code>:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">collections</span><span class="pi">:</span>
  <span class="na">thisWeek</span><span class="pi">:</span>
    <span class="na">output</span><span class="pi">:</span> <span class="no">true</span>
  <span class="na">links</span><span class="pi">:</span>
    <span class="na">output</span><span class="pi">:</span> <span class="no">true</span>
</code></pre></div></div>

<p>and this, to apply default layouts:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">defaults</span><span class="pi">:</span>
  <span class="pi">-</span> 
    <span class="na">scope</span><span class="pi">:</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">_thisWeek"</span>
      <span class="na">layout</span><span class="pi">:</span> <span class="s">posts</span>
    <span class="na">values</span><span class="pi">:</span>
      <span class="na">strip_title</span><span class="pi">:</span> <span class="no">true</span>

  <span class="pi">-</span>
    <span class="na">scope</span><span class="pi">:</span>
      <span class="na">path</span><span class="pi">:</span> <span class="s2">"</span><span class="s">_links"</span> 
      <span class="na">type</span><span class="pi">:</span> <span class="s2">"</span><span class="s">links"</span> 
    <span class="na">values</span><span class="pi">:</span>
      <span class="na">layout</span><span class="pi">:</span> <span class="s">link</span>
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">strip_title: true</code> is used with the <a href="https://www.rubydoc.info/gems/jekyll-titles-from-headings/0.5.3">jekyll-titles-from-headings</a> plugin to ensure that So-Simple doesn’t display the collection name as well as the actual title.</p>

<h2 id="link-layout">Link layout</h2>

<p>Is a cut and paste from the So-Solid <code class="language-plaintext highlighter-rouge">post.html</code> layout (to display a single <em>post</em>), hacked to display the <em>link</em> variables:</p>
<ul>
  <li><code class="language-plaintext highlighter-rouge">target</code>: the actual URL I want to share</li>
  <li><code class="language-plaintext highlighter-rouge">title</code>: a short description of the link</li>
  <li><code class="language-plaintext highlighter-rouge">source</code>: where/how I found that link in the first place (free text)</li>
  <li><code class="language-plaintext highlighter-rouge">source_url</code>: where/how I found that link in the first place (URL)</li>
  <li><code class="language-plaintext highlighter-rouge">tags</code>: keywords associated with this link</li>
</ul>

<p>See <a href="/links/">the result</a></p>

<h2 id="week-ending-layout">Week Ending layout</h2>

<p>Another cut and paste, this time from the So-Solid  <code class="language-plaintext highlighter-rouge">posts.html</code> layout (to display multiple <em>posts</em>), hacked so that:</p>
<ul>
  <li>it displays a standard title of ‘Week ending’ and the front-matter variable <code class="language-plaintext highlighter-rouge">date</code></li>
  <li>it displays <em>posts</em> AND <em>links</em>, under separate headings</li>
  <li>it filter these based on their date being within 7 days of the front-matter variable <code class="language-plaintext highlighter-rouge">date</code></li>
</ul>

<p>The main difficulty here was filtering on dates. The trick is to use the <a href="https://shopify.github.io/liquid/tags/variable/"><code class="language-plaintext highlighter-rouge">capture</code> tag</a> to create time variables in unix format (number of seconds) which can then be manipulated as integers:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">weekending</span><span class="w"> </span><span class="p">%}{{</span><span class="nv">page</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s2">"%s"</span><span class="w"> </span><span class="p">}}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">seven_days_ago</span><span class="w"> </span><span class="p">%}{{</span><span class="nv">weekending</span><span class="w"> </span><span class="p">|</span><span class="nf">minus</span><span class="p">:</span><span class="w"> </span><span class="mi">604800</span><span class="p">}}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">capture</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="p">%}{{</span><span class="nv">entry</span><span class="p">.</span><span class="nv">date</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">date</span><span class="p">:</span><span class="w"> </span><span class="s1">'%s'</span><span class="p">}}{%</span><span class="w"> </span><span class="nt">endcapture</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="kr">if</span><span class="w"> </span><span class="nv">seven_days_ago</span><span class="w"> </span><span class="o">&lt;</span><span class="w"> </span><span class="nv">date</span><span class="w">  </span><span class="ow">and</span><span class="w"> </span><span class="nv">date</span><span class="w"> </span><span class="o">&lt;=</span><span class="w"> </span><span class="nv">weekending</span><span class="w"> </span><span class="p">%}</span>
  ... show the post or link ...
<span class="p">{%</span><span class="w"> </span><span class="kr">endif</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>See <a href="/thisweek/">the result</a></p>
<h2 id="tags-layout">Tags layout</h2>

<p>Another cut and paste, this time from the So-Solid <code class="language-plaintext highlighter-rouge">tags.html</code> layout (to display <em>posts</em> grouped by <em>tag</em>), hacked so that it considers tagged <em>posts</em> AND <em>links</em>.</p>

<p>The hardest bit here was to deal with Liquid arrays. An initial google of the issue led to all sort of outdated advice, until I figured out that <a href="https://jekyllrb.com/docs/liquid/">Jekyll version of Liquid</a> provides additional array <a href="https://jekyllrb.com/docs/liquid/filters/">filters</a> that make it slightly easier to manipulate them.</p>

<p>To initialise an empty array, you still need to split an empty string, but you can then use the <code class="language-plaintext highlighter-rouge">push</code> filter to add entries to it:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">items</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">push</span><span class="p">:</span><span class="w"> </span><span class="s1">'a value'</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>That said, after a lot of faffing, I simply filtered down tag collections before concatenating them:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">taggedItems</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="s2">""</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">split</span><span class="p">:</span><span class="w"> </span><span class="s1">','</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">taggedItems</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">taggedItems</span><span class="w">  </span><span class="p">|</span><span class="w"> </span><span class="nf">concat</span><span class="p">:</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">posts</span><span class="p">|</span><span class="w"> </span><span class="nf">where_exp</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"post"</span><span class="p">,</span><span class="w"> </span><span class="s2">"post.tags contains tag"</span><span class="w"> </span><span class="p">%}</span>
<span class="p">{%</span><span class="w"> </span><span class="nt">assign</span><span class="w"> </span><span class="nv">taggedItems</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">taggedItems</span><span class="w">  </span><span class="p">|</span><span class="w"> </span><span class="nf">concat</span><span class="p">:</span><span class="w"> </span><span class="nv">site</span><span class="p">.</span><span class="nv">links</span><span class="w"> </span><span class="p">|</span><span class="w"> </span><span class="nf">where_exp</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="s2">"link"</span><span class="p">,</span><span class="w"> </span><span class="s2">"link.tags contains tag"</span><span class="w"> </span><span class="p">%}</span>
</code></pre></div></div>

<p>What is really pants is that Liquid doesn’t give us access to Map objects, other than through the <code class="language-plaintext highlighter-rouge">group_by</code> filter.
My logic therefore is forced to iterate through all tagged content multiple time in order to replicate the logic of the original layout, which itself could do with the built-in <code class="language-plaintext highlighter-rouge">site.tags</code> map, keyed on tag names.</p>

<h2 id="includes">Includes</h2>

<p>So-Solid makes heavy use of Jekyll <a href="https://jekyllrb.com/docs/includes/">includes</a>.<br />
Unfortunately, these stopped me making a simple cut and paste of the So-Solid’s layouts, without cut and pasting the entire <code class="language-plaintext highlighter-rouge">include</code> folder into mine.
I will, later, try and see if I could reference the file within the <code class="language-plaintext highlighter-rouge">gemfile</code>.
I have also initially made a mess of things by cut and pasting the markup from these files into mines, which will lead to duplication and might stop me from picking up bug fixes in later releases of So-Solid. I will tidy this up later.</p>

<h2 id="debugging-liquid">Debugging Liquid</h2>

<p>Worth remembering this trick : you can use Jekyll <code class="language-plaintext highlighter-rouge">inspect</code> <a href="https://jekyllrb.com/docs/liquid/filters/">filter</a> to dump the value of any variable:</p>

<div class="language-liquid highlighter-rouge"><div class="highlight"><pre class="highlight"><code>myVariable = <span class="p">{{</span><span class="w"> </span><span class="nv">myVariable</span><span class="p">|</span><span class="w"> </span><span class="nf">inspect</span><span class="w"> </span><span class="p">}}</span> 
</code></pre></div></div>]]></content><author><name>Franck</name></author><category term="jekyll" /><category term="github" /><category term="liquid" /><summary type="html"><![CDATA[Following my initial setup of Jekyll (as per Setting up my GitHub page with Jekyll), I now want to customise the site to meet my personal requirements.]]></summary></entry><entry><title type="html">Setting up my GitHub page with Jekyll</title><link href="https://franck-chester.github.io//2021/09/27/jekyll.html" rel="alternate" type="text/html" title="Setting up my GitHub page with Jekyll" /><published>2021-09-27T00:00:00+00:00</published><updated>2021-09-27T00:00:00+00:00</updated><id>https://franck-chester.github.io//2021/09/27/jekyll</id><content type="html" xml:base="https://franck-chester.github.io//2021/09/27/jekyll.html"><![CDATA[<p>I have decided to finally set up a <a href="/home">mini blog type site</a> on my under utilised GitHub.
The main intention is to have a single place to put all the random stuff I find when browsing the internet, twitter and linkedin, in a format I can then share as and when I think it could be useful to the wider world.</p>

<h1 id="github-pages">GitHub Pages</h1>

<p>I follow the <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/creating-a-github-pages-site">instructions</a> to setup a new repository <code class="language-plaintext highlighter-rouge">franck-chester.github.io</code> on my personal GitHub <a href="https://github.com/franck-chester">https://github.com/franck-chester</a>.</p>

<p>My default branch, where I will create content and configure Jekyll, is <code class="language-plaintext highlighter-rouge">main</code>.
I create an additional <code class="language-plaintext highlighter-rouge">gh-pages</code> branch where I will publish the built up site.
I then <a href="https://docs.github.com/en/pages/getting-started-with-github-pages/configuring-a-publishing-source-for-your-github-pages-site">configure GitHub pages to source content from <code class="language-plaintext highlighter-rouge">gh-pages</code></a></p>

<p>Finally, I clone this blank repository to my ubuntu environment on WSL2.</p>

<h1 id="jekyll">Jekyll</h1>

<p><a href="https://jekyllrb.com/">Jekyll</a> is a static site generator, and comes <a href="https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/about-github-pages-and-jekyll">recommended when setting up GitHub Pages</a>.</p>

<p>Setting it up in my new repository was no problem, just follow the instructions.</p>

<p>It <a href="https://jekyllrb.com/docs/installation/windows/">isn’t officially supported on Windows</a>, but not an issue here as I have just setup Ubuntu on WSL2.
Plus running it locally on Ubuntu keeps it all much closer to the GitHub action environment that I intend to use for the day to day site generation.</p>

<h1 id="look--feel---so-simple">Look &amp; Feel - So Simple</h1>

<p>I don’t really want to spend too much time styling this, so will simply use one of the many available <a href="https://jekyllthemes.io/free">free Jekyll themes</a>, in this case <a href="https://github.com/mmistakes/so-simple-theme">So Simple</a> looks good enough - as per this <a href="https://mmistakes.github.io/so-simple-theme/">example site</a>.</p>

<h2 id="configuring-so-simple">Configuring So-Simple</h2>

<p>From the <a href="https://github.com/mmistakes/so-simple-theme/blob/master/README.md">README.ME</a> file:</p>

<p>Add this line to your Jekyll site’s Gemfile (or create one):</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem <span class="s2">"jekyll-theme-so-simple"</span>
</code></pre></div></div>

<p>Add this line to your Jekyll site’s _config.yml file:</p>

<div class="language-yaml highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="na">theme</span><span class="pi">:</span> <span class="s">jekyll-theme-so-simple</span>
</code></pre></div></div>

<p>Then run Bundler to install the theme gem and dependencies:</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">install</span>
</code></pre></div></div>

<h2 id="create-some-default-content">Create some default content</h2>

<p>In the root of my site, I create the following pages, using markdown, and the corresponding <a href="https://github.com/mmistakes/so-simple-theme#layouts">So-Simple layouts</a> in the <em>front-matter</em> :</p>

<ul>
  <li>index.md</li>
  <li>posts.md</li>
  <li>search.md</li>
  <li>tags.md</li>
</ul>

<h2 id="configuring-github">Configuring GitHub</h2>

<p>We can’t use GitHub Pages’ built in Jekyll functionality, as it is many versions behind and limits the gems we can use.
Instead, we will use <a href="https://github.com/helaili/jekyll-action">helaili/jekyll-action</a> to publish our GitHub pages via a GitHub action.</p>

<p>Again, we can simply use the documentation, making sure to target the <code class="language-plaintext highlighter-rouge">gh-pages</code> branch.</p>

<p>We can push our <code class="language-plaintext highlighter-rouge">main</code> branch to GitHub, which triggers the GitHub action, which results in a nicely styled blog like site - result.</p>

<h2 id="development-cycle">Development cycle</h2>

<p>The easiest IMO is to launch vs code from within WSL2 <code class="language-plaintext highlighter-rouge">code .</code> and use it to both edit the content and launch a local Jekyll instance with</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bundle <span class="nb">exec </span>jekyll serve <span class="nt">--drafts</span> <span class="nt">--future</span>
</code></pre></div></div>

<p>I can test the pages at <a href="http://127.0.0.1:4000">http://127.0.0.1:4000</a> before I commit to GitHub.</p>

<p>Also, use this when adding plugins :</p>
<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>gem update
</code></pre></div></div>]]></content><author><name>Franck</name></author><category term="jekyll" /><category term="github" /><summary type="html"><![CDATA[I have decided to finally set up a mini blog type site on my under utilised GitHub. The main intention is to have a single place to put all the random stuff I find when browsing the internet, twitter and linkedin, in a format I can then share as and when I think it could be useful to the wider world.]]></summary></entry></feed>